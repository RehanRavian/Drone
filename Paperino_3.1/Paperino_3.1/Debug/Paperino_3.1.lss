
Paperino_3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00002840  000028d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800126  00800126  000028fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000292c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032a5  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000139c  00000000  00000000  00005f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bc4  00000000  00000000  0000730d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b28  00000000  00000000  00008ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e80  00000000  00000000  000099fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000200f  00000000  00000000  0000a87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000c88b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__vector_9>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 27 10 	jmp	0x204e	; 0x204e <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__vector_20>
      54:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__vector_21>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__vector_25>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 31 10 	jmp	0x2062	; 0x2062 <__vector_31>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__vector_35>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 00       	.word	0x003f	; ????

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	da e0       	ldi	r29, 0x0A	; 10
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e0 e4       	ldi	r30, 0x40	; 64
      ee:	f8 e2       	ldi	r31, 0x28	; 40
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a6 32       	cpi	r26, 0x26	; 38
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a6 e2       	ldi	r26, 0x26	; 38
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ac 3b       	cpi	r26, 0xBC	; 188
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <main>
     110:	0c 94 1e 14 	jmp	0x283c	; 0x283c <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <selected_value>:
#include "IMU.h"
#include "USART.h"
#include "Timer.h"

void selected_value(uint8_t choise){
	switch(choise){
     118:	8b 36       	cpi	r24, 0x6B	; 107
     11a:	09 f4       	brne	.+2      	; 0x11e <selected_value+0x6>
     11c:	df c0       	rjmp	.+446    	; 0x2dc <selected_value+0x1c4>
     11e:	40 f5       	brcc	.+80     	; 0x170 <selected_value+0x58>
     120:	85 36       	cpi	r24, 0x65	; 101
     122:	09 f4       	brne	.+2      	; 0x126 <selected_value+0xe>
     124:	91 c0       	rjmp	.+290    	; 0x248 <selected_value+0x130>
     126:	90 f4       	brcc	.+36     	; 0x14c <selected_value+0x34>
     128:	82 36       	cpi	r24, 0x62	; 98
     12a:	09 f4       	brne	.+2      	; 0x12e <selected_value+0x16>
     12c:	5a c0       	rjmp	.+180    	; 0x1e2 <selected_value+0xca>
     12e:	38 f4       	brcc	.+14     	; 0x13e <selected_value+0x26>
     130:	88 23       	and	r24, r24
     132:	09 f4       	brne	.+2      	; 0x136 <selected_value+0x1e>
     134:	24 c1       	rjmp	.+584    	; 0x37e <selected_value+0x266>
     136:	81 36       	cpi	r24, 0x61	; 97
     138:	09 f4       	brne	.+2      	; 0x13c <selected_value+0x24>
     13a:	42 c0       	rjmp	.+132    	; 0x1c0 <selected_value+0xa8>
     13c:	24 c1       	rjmp	.+584    	; 0x386 <selected_value+0x26e>
     13e:	83 36       	cpi	r24, 0x63	; 99
     140:	09 f4       	brne	.+2      	; 0x144 <selected_value+0x2c>
     142:	60 c0       	rjmp	.+192    	; 0x204 <selected_value+0xec>
     144:	84 36       	cpi	r24, 0x64	; 100
     146:	09 f4       	brne	.+2      	; 0x14a <selected_value+0x32>
     148:	6e c0       	rjmp	.+220    	; 0x226 <selected_value+0x10e>
     14a:	1d c1       	rjmp	.+570    	; 0x386 <selected_value+0x26e>
     14c:	88 36       	cpi	r24, 0x68	; 104
     14e:	09 f4       	brne	.+2      	; 0x152 <selected_value+0x3a>
     150:	a3 c0       	rjmp	.+326    	; 0x298 <selected_value+0x180>
     152:	38 f4       	brcc	.+14     	; 0x162 <selected_value+0x4a>
     154:	86 36       	cpi	r24, 0x66	; 102
     156:	09 f4       	brne	.+2      	; 0x15a <selected_value+0x42>
     158:	88 c0       	rjmp	.+272    	; 0x26a <selected_value+0x152>
     15a:	87 36       	cpi	r24, 0x67	; 103
     15c:	09 f4       	brne	.+2      	; 0x160 <selected_value+0x48>
     15e:	96 c0       	rjmp	.+300    	; 0x28c <selected_value+0x174>
     160:	12 c1       	rjmp	.+548    	; 0x386 <selected_value+0x26e>
     162:	89 36       	cpi	r24, 0x69	; 105
     164:	09 f4       	brne	.+2      	; 0x168 <selected_value+0x50>
     166:	9e c0       	rjmp	.+316    	; 0x2a4 <selected_value+0x18c>
     168:	8a 36       	cpi	r24, 0x6A	; 106
     16a:	09 f4       	brne	.+2      	; 0x16e <selected_value+0x56>
     16c:	a9 c0       	rjmp	.+338    	; 0x2c0 <selected_value+0x1a8>
     16e:	0b c1       	rjmp	.+534    	; 0x386 <selected_value+0x26e>
     170:	81 37       	cpi	r24, 0x71	; 113
     172:	09 f4       	brne	.+2      	; 0x176 <selected_value+0x5e>
     174:	ec c0       	rjmp	.+472    	; 0x34e <selected_value+0x236>
     176:	90 f4       	brcc	.+36     	; 0x19c <selected_value+0x84>
     178:	8e 36       	cpi	r24, 0x6E	; 110
     17a:	09 f4       	brne	.+2      	; 0x17e <selected_value+0x66>
     17c:	d0 c0       	rjmp	.+416    	; 0x31e <selected_value+0x206>
     17e:	38 f4       	brcc	.+14     	; 0x18e <selected_value+0x76>
     180:	8c 36       	cpi	r24, 0x6C	; 108
     182:	09 f4       	brne	.+2      	; 0x186 <selected_value+0x6e>
     184:	b9 c0       	rjmp	.+370    	; 0x2f8 <selected_value+0x1e0>
     186:	8d 36       	cpi	r24, 0x6D	; 109
     188:	09 f4       	brne	.+2      	; 0x18c <selected_value+0x74>
     18a:	c4 c0       	rjmp	.+392    	; 0x314 <selected_value+0x1fc>
     18c:	fc c0       	rjmp	.+504    	; 0x386 <selected_value+0x26e>
     18e:	8f 36       	cpi	r24, 0x6F	; 111
     190:	09 f4       	brne	.+2      	; 0x194 <selected_value+0x7c>
     192:	ca c0       	rjmp	.+404    	; 0x328 <selected_value+0x210>
     194:	80 37       	cpi	r24, 0x70	; 112
     196:	09 f4       	brne	.+2      	; 0x19a <selected_value+0x82>
     198:	d5 c0       	rjmp	.+426    	; 0x344 <selected_value+0x22c>
     19a:	f5 c0       	rjmp	.+490    	; 0x386 <selected_value+0x26e>
     19c:	84 37       	cpi	r24, 0x74	; 116
     19e:	09 f4       	brne	.+2      	; 0x1a2 <selected_value+0x8a>
     1a0:	e5 c0       	rjmp	.+458    	; 0x36c <selected_value+0x254>
     1a2:	38 f4       	brcc	.+14     	; 0x1b2 <selected_value+0x9a>
     1a4:	82 37       	cpi	r24, 0x72	; 114
     1a6:	09 f4       	brne	.+2      	; 0x1aa <selected_value+0x92>
     1a8:	d7 c0       	rjmp	.+430    	; 0x358 <selected_value+0x240>
     1aa:	83 37       	cpi	r24, 0x73	; 115
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <selected_value+0x98>
     1ae:	d9 c0       	rjmp	.+434    	; 0x362 <selected_value+0x24a>
     1b0:	ea c0       	rjmp	.+468    	; 0x386 <selected_value+0x26e>
     1b2:	85 37       	cpi	r24, 0x75	; 117
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <selected_value+0xa0>
     1b6:	ea c0       	rjmp	.+468    	; 0x38c <selected_value+0x274>
     1b8:	8f 3f       	cpi	r24, 0xFF	; 255
     1ba:	09 f4       	brne	.+2      	; 0x1be <selected_value+0xa6>
     1bc:	dc c0       	rjmp	.+440    	; 0x376 <selected_value+0x25e>
     1be:	e3 c0       	rjmp	.+454    	; 0x386 <selected_value+0x26e>
		case ACCX:
		computed_acceleration(0);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 40 05 	call	0xa80	; 0xa80 <computed_acceleration>
		USART_Transmit(accx);
     1c6:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <accx>
     1ca:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <accx+0x1>
     1ce:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <accx+0x2>
     1d2:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <accx+0x3>
     1d6:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     1da:	86 2f       	mov	r24, r22
     1dc:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     1e0:	08 95       	ret
		case ACCY:
		computed_acceleration(0);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 40 05 	call	0xa80	; 0xa80 <computed_acceleration>
		USART_Transmit(accy);
     1e8:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <accy>
     1ec:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <accy+0x1>
     1f0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <accy+0x2>
     1f4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <accy+0x3>
     1f8:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     1fc:	86 2f       	mov	r24, r22
     1fe:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     202:	08 95       	ret
		case ACCZ:
		computed_acceleration(0);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 40 05 	call	0xa80	; 0xa80 <computed_acceleration>
		USART_Transmit(accz);
     20a:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <accz>
     20e:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <accz+0x1>
     212:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <accz+0x2>
     216:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <accz+0x3>
     21a:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     21e:	86 2f       	mov	r24, r22
     220:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     224:	08 95       	ret
		case GYROX:
		computed_gyroscope(0);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 ca 05 	call	0xb94	; 0xb94 <computed_gyroscope>
		USART_Transmit(gyrox);
     22c:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <gyrox>
     230:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <gyrox+0x1>
     234:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <gyrox+0x2>
     238:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <gyrox+0x3>
     23c:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     240:	86 2f       	mov	r24, r22
     242:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     246:	08 95       	ret
		case GYROY:
		computed_gyroscope(0);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	0e 94 ca 05 	call	0xb94	; 0xb94 <computed_gyroscope>
		USART_Transmit(gyroy);
     24e:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <gyroy>
     252:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <gyroy+0x1>
     256:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <gyroy+0x2>
     25a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <gyroy+0x3>
     25e:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     262:	86 2f       	mov	r24, r22
     264:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     268:	08 95       	ret
		case GYROZ:
		computed_gyroscope(0);
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 ca 05 	call	0xb94	; 0xb94 <computed_gyroscope>
		USART_Transmit(gyroz);
     270:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <gyroz>
     274:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <gyroz+0x1>
     278:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <gyroz+0x2>
     27c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <gyroz+0x3>
     280:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     284:	86 2f       	mov	r24, r22
     286:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     28a:	08 95       	ret
		case TEMP:
		USART_Transmit(temperature(0));
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 1a 05 	call	0xa34	; 0xa34 <temperature>
     292:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     296:	08 95       	ret
		case WHOIAM:
		USART_Transmit(IMU_who_i_am(0));
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 08 05 	call	0xa10	; 0xa10 <IMU_who_i_am>
     29e:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     2a2:	08 95       	ret
		case ANGLEACCX:
		USART_Transmit(Angle_X_Acc);
     2a4:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <Angle_X_Acc>
     2a8:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <Angle_X_Acc+0x1>
     2ac:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Angle_X_Acc+0x2>
     2b0:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <Angle_X_Acc+0x3>
     2b4:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     2b8:	86 2f       	mov	r24, r22
     2ba:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     2be:	08 95       	ret
		case ANGLEACCY:
		USART_Transmit(Angle_Y_Acc);
     2c0:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <Angle_Y_Acc>
     2c4:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <Angle_Y_Acc+0x1>
     2c8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Angle_Y_Acc+0x2>
     2cc:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <Angle_Y_Acc+0x3>
     2d0:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     2d4:	86 2f       	mov	r24, r22
     2d6:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     2da:	08 95       	ret
		case ANGLEGYROX:
		USART_Transmit(Angle_X_Gyro);
     2dc:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Angle_X_Gyro>
     2e0:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <Angle_X_Gyro+0x1>
     2e4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Angle_X_Gyro+0x2>
     2e8:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Angle_X_Gyro+0x3>
     2ec:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     2f0:	86 2f       	mov	r24, r22
     2f2:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     2f6:	08 95       	ret
		case ANGLEGYROY:
		USART_Transmit(Angle_Y_Gyro);
     2f8:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <Angle_Y_Gyro>
     2fc:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <Angle_Y_Gyro+0x1>
     300:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Angle_Y_Gyro+0x2>
     304:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Angle_Y_Gyro+0x3>
     308:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     30c:	86 2f       	mov	r24, r22
     30e:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     312:	08 95       	ret
		case ANGLEX:
		USART_Transmit(AngleX);
     314:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <AngleX>
     318:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     31c:	08 95       	ret
		case ANGLEY:
		USART_Transmit(AngleY);
     31e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <AngleY>
     322:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     326:	08 95       	ret
		case TIME:
		USART_Transmit((uint8_t)system_tick_MG);
     328:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <system_tick_MG>
     32c:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <system_tick_MG+0x1>
     330:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <system_tick_MG+0x2>
     334:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <system_tick_MG+0x3>
     338:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     33c:	86 2f       	mov	r24, r22
     33e:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     342:	08 95       	ret
		case THROTTLE:
		USART_Transmit(throttle);
     344:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <throttle>
     348:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     34c:	08 95       	ret
		case PITCH:
		USART_Transmit(pitch);
     34e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <pitch>
     352:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     356:	08 95       	ret
		case ROLL:
		USART_Transmit(roll);
     358:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <roll>
     35c:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     360:	08 95       	ret
		case YAW:
		USART_Transmit(yaw);
     362:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <yaw>
     366:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     36a:	08 95       	ret
		case AUX1:
		USART_Transmit(aux1);
     36c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <aux1>
     370:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     374:	08 95       	ret
		case AUX2:
		break;
		case 255:
		USART_Transmit('p');
     376:	80 e7       	ldi	r24, 0x70	; 112
     378:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     37c:	08 95       	ret
		case 0:
		USART_Transmit('q');
     37e:	81 e7       	ldi	r24, 0x71	; 113
     380:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		break;
     384:	08 95       	ret
		default:
		USART_Transmit('e');
     386:	85 e6       	ldi	r24, 0x65	; 101
     388:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     38c:	08 95       	ret

0000038e <TWI_init>:
		
	}
	
	TWI_stop();
	return 0;
}
     38e:	8c e0       	ldi	r24, 0x0C	; 12
     390:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     394:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     398:	08 95       	ret

0000039a <TWI_start>:
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	84 ea       	ldi	r24, 0xA4	; 164
     3a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3a4:	ec eb       	ldi	r30, 0xBC	; 188
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	88 23       	and	r24, r24
     3ac:	ec f7       	brge	.-6      	; 0x3a8 <TWI_start+0xe>
     3ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3b2:	88 7f       	andi	r24, 0xF8	; 248
     3b4:	88 30       	cpi	r24, 0x08	; 8
     3b6:	e1 f0       	breq	.+56     	; 0x3f0 <TWI_start+0x56>
     3b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3bc:	88 7f       	andi	r24, 0xF8	; 248
     3be:	80 31       	cpi	r24, 0x10	; 16
     3c0:	c9 f0       	breq	.+50     	; 0x3f4 <TWI_start+0x5a>
     3c2:	68 e0       	ldi	r22, 0x08	; 8
     3c4:	87 e1       	ldi	r24, 0x17	; 23
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     3cc:	67 e0       	ldi	r22, 0x07	; 7
     3ce:	80 e1       	ldi	r24, 0x10	; 16
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     3d6:	c9 eb       	ldi	r28, 0xB9	; 185
     3d8:	d0 e0       	ldi	r29, 0x00	; 0
     3da:	88 81       	ld	r24, Y
     3dc:	88 7f       	andi	r24, 0xF8	; 248
     3de:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     3e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3e6:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     3ea:	88 81       	ld	r24, Y
     3ec:	88 7f       	andi	r24, 0xF8	; 248
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <TWI_start+0x5c>
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <TWI_start+0x5c>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <TWI_address>:
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	80 6d       	ori	r24, 0xD0	; 208
     402:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     406:	84 e8       	ldi	r24, 0x84	; 132
     408:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     40c:	ec eb       	ldi	r30, 0xBC	; 188
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	88 23       	and	r24, r24
     414:	ec f7       	brge	.-6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     416:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     41a:	88 7f       	andi	r24, 0xF8	; 248
     41c:	80 34       	cpi	r24, 0x40	; 64
     41e:	e1 f0       	breq	.+56     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     420:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     424:	88 7f       	andi	r24, 0xF8	; 248
     426:	88 31       	cpi	r24, 0x18	; 24
     428:	c9 f0       	breq	.+50     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     42a:	68 e0       	ldi	r22, 0x08	; 8
     42c:	87 e1       	ldi	r24, 0x17	; 23
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     434:	66 e0       	ldi	r22, 0x06	; 6
     436:	8a e0       	ldi	r24, 0x0A	; 10
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     43e:	c9 eb       	ldi	r28, 0xB9	; 185
     440:	d0 e0       	ldi	r29, 0x00	; 0
     442:	88 81       	ld	r24, Y
     444:	88 7f       	andi	r24, 0xF8	; 248
     446:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     44a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     44e:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     452:	88 81       	ld	r24, Y
     454:	88 7f       	andi	r24, 0xF8	; 248
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <TWI_send>:
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     46c:	84 e8       	ldi	r24, 0x84	; 132
     46e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     472:	ec eb       	ldi	r30, 0xBC	; 188
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	88 23       	and	r24, r24
     47a:	ec f7       	brge	.-6      	; 0x476 <TWI_send+0x12>
     47c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     480:	88 7f       	andi	r24, 0xF8	; 248
     482:	88 32       	cpi	r24, 0x28	; 40
     484:	b9 f0       	breq	.+46     	; 0x4b4 <TWI_send+0x50>
     486:	68 e0       	ldi	r22, 0x08	; 8
     488:	87 e1       	ldi	r24, 0x17	; 23
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     490:	66 e0       	ldi	r22, 0x06	; 6
     492:	8a e0       	ldi	r24, 0x0A	; 10
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     49a:	c9 eb       	ldi	r28, 0xB9	; 185
     49c:	d0 e0       	ldi	r29, 0x00	; 0
     49e:	88 81       	ld	r24, Y
     4a0:	88 7f       	andi	r24, 0xF8	; 248
     4a2:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     4a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4aa:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     4ae:	88 81       	ld	r24, Y
     4b0:	88 7f       	andi	r24, 0xF8	; 248
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <TWI_send+0x52>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <TWI_receive_ack>:
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	84 ec       	ldi	r24, 0xC4	; 196
     4c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     4c6:	ec eb       	ldi	r30, 0xBC	; 188
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	88 23       	and	r24, r24
     4ce:	ec f7       	brge	.-6      	; 0x4ca <TWI_receive_ack+0xe>
     4d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4d4:	88 7f       	andi	r24, 0xF8	; 248
     4d6:	80 35       	cpi	r24, 0x50	; 80
     4d8:	19 f4       	brne	.+6      	; 0x4e0 <TWI_receive_ack+0x24>
     4da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     4de:	16 c0       	rjmp	.+44     	; 0x50c <TWI_receive_ack+0x50>
     4e0:	68 e0       	ldi	r22, 0x08	; 8
     4e2:	87 e1       	ldi	r24, 0x17	; 23
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     4ea:	69 e0       	ldi	r22, 0x09	; 9
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     4f4:	c9 eb       	ldi	r28, 0xB9	; 185
     4f6:	d0 e0       	ldi	r29, 0x00	; 0
     4f8:	88 81       	ld	r24, Y
     4fa:	88 7f       	andi	r24, 0xF8	; 248
     4fc:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     504:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     508:	88 81       	ld	r24, Y
     50a:	88 7f       	andi	r24, 0xF8	; 248
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <TWI_receive_nack>:
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	84 e8       	ldi	r24, 0x84	; 132
     518:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     51c:	ec eb       	ldi	r30, 0xBC	; 188
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	88 23       	and	r24, r24
     524:	ec f7       	brge	.-6      	; 0x520 <TWI_receive_nack+0xe>
     526:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     52a:	88 7f       	andi	r24, 0xF8	; 248
     52c:	88 35       	cpi	r24, 0x58	; 88
     52e:	19 f4       	brne	.+6      	; 0x536 <TWI_receive_nack+0x24>
     530:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     534:	16 c0       	rjmp	.+44     	; 0x562 <TWI_receive_nack+0x50>
     536:	68 e0       	ldi	r22, 0x08	; 8
     538:	87 e1       	ldi	r24, 0x17	; 23
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     540:	69 e0       	ldi	r22, 0x09	; 9
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 b1 10 	call	0x2162	; 0x2162 <USART_String>
     54a:	c9 eb       	ldi	r28, 0xB9	; 185
     54c:	d0 e0       	ldi	r29, 0x00	; 0
     54e:	88 81       	ld	r24, Y
     550:	88 7f       	andi	r24, 0xF8	; 248
     552:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     556:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     55a:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
     55e:	88 81       	ld	r24, Y
     560:	88 7f       	andi	r24, 0xF8	; 248
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <TWI_stop>:
     568:	84 e9       	ldi	r24, 0x94	; 148
     56a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     56e:	08 95       	ret

00000570 <TWI_send_16bit>:
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	c8 2f       	mov	r28, r24
     576:	d6 2f       	mov	r29, r22
     578:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     582:	88 23       	and	r24, r24
     584:	21 f0       	breq	.+8      	; 0x58e <TWI_send_16bit+0x1e>
     586:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     58a:	88 7f       	andi	r24, 0xF8	; 248
     58c:	15 c0       	rjmp	.+42     	; 0x5b8 <TWI_send_16bit+0x48>
     58e:	8c 2f       	mov	r24, r28
     590:	0e 94 32 02 	call	0x464	; 0x464 <TWI_send>
     594:	88 23       	and	r24, r24
     596:	21 f0       	breq	.+8      	; 0x5a0 <TWI_send_16bit+0x30>
     598:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     59c:	88 7f       	andi	r24, 0xF8	; 248
     59e:	0c c0       	rjmp	.+24     	; 0x5b8 <TWI_send_16bit+0x48>
     5a0:	8d 2f       	mov	r24, r29
     5a2:	0e 94 32 02 	call	0x464	; 0x464 <TWI_send>
     5a6:	88 23       	and	r24, r24
     5a8:	21 f0       	breq	.+8      	; 0x5b2 <TWI_send_16bit+0x42>
     5aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5ae:	88 7f       	andi	r24, 0xF8	; 248
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <TWI_send_16bit+0x48>
     5b2:	94 e9       	ldi	r25, 0x94	; 148
     5b4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <TWI_receive_8bit>:


uint8_t TWI_receive_8bit(uint8_t registro){
     5be:	cf 93       	push	r28
     5c0:	c8 2f       	mov	r28, r24
	if (TWI_start()!= 0){ //masking for prescaler bits|
     5c2:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     5c6:	88 23       	and	r24, r24
     5c8:	21 f0       	breq	.+8      	; 0x5d2 <TWI_receive_8bit+0x14>
		return TWSR & 0xF8;
     5ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5ce:	88 7f       	andi	r24, 0xF8	; 248
     5d0:	28 c0       	rjmp	.+80     	; 0x622 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_address(0) != 0){
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     5d8:	88 23       	and	r24, r24
     5da:	21 f0       	breq	.+8      	; 0x5e4 <TWI_receive_8bit+0x26>
		return TWSR & 0xF8;
     5dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5e0:	88 7f       	andi	r24, 0xF8	; 248
     5e2:	1f c0       	rjmp	.+62     	; 0x622 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_send(registro) != 0){
     5e4:	8c 2f       	mov	r24, r28
     5e6:	0e 94 32 02 	call	0x464	; 0x464 <TWI_send>
     5ea:	88 23       	and	r24, r24
     5ec:	21 f0       	breq	.+8      	; 0x5f6 <TWI_receive_8bit+0x38>
		return TWSR & 0xF8;
     5ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5f2:	88 7f       	andi	r24, 0xF8	; 248
     5f4:	16 c0       	rjmp	.+44     	; 0x622 <TWI_receive_8bit+0x64>
	}
	
	
	if (TWI_start()!= 0){
     5f6:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     5fa:	88 23       	and	r24, r24
     5fc:	21 f0       	breq	.+8      	; 0x606 <TWI_receive_8bit+0x48>
		return TWSR & 0xF8;
     5fe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     602:	88 7f       	andi	r24, 0xF8	; 248
     604:	0e c0       	rjmp	.+28     	; 0x622 <TWI_receive_8bit+0x64>
	}
	
	if (TWI_address(1) != 0){
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     60c:	88 23       	and	r24, r24
     60e:	21 f0       	breq	.+8      	; 0x618 <TWI_receive_8bit+0x5a>
		return TWSR & 0xF8;
     610:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     614:	88 7f       	andi	r24, 0xF8	; 248
     616:	05 c0       	rjmp	.+10     	; 0x622 <TWI_receive_8bit+0x64>
	}

	uint8_t data = 0;
	data = TWI_receive_nack();
     618:	0e 94 89 02 	call	0x512	; 0x512 <TWI_receive_nack>
		return TWSR & 0xF8;
	}
}

void TWI_stop(){
	TWCR =	(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     61c:	94 e9       	ldi	r25, 0x94	; 148
     61e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	uint8_t data = 0;
	data = TWI_receive_nack();
	TWI_stop();
	return data;
}
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <TWI_receive_16bit>:

uint16_t TWI_receive_16bit(uint8_t registro){
     626:	cf 93       	push	r28
     628:	c8 2f       	mov	r28, r24
	if (TWI_start()!= 0){
     62a:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     62e:	88 23       	and	r24, r24
     630:	29 f0       	breq	.+10     	; 0x63c <TWI_receive_16bit+0x16>
		return TWSR & 0xF8;
     632:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     636:	88 7f       	andi	r24, 0xF8	; 248
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	2f c0       	rjmp	.+94     	; 0x69a <TWI_receive_16bit+0x74>
	}
	
	if (TWI_address(0) != 0){
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     642:	88 23       	and	r24, r24
     644:	29 f0       	breq	.+10     	; 0x650 <TWI_receive_16bit+0x2a>
		return TWSR & 0xF8;
     646:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     64a:	88 7f       	andi	r24, 0xF8	; 248
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	25 c0       	rjmp	.+74     	; 0x69a <TWI_receive_16bit+0x74>
	}

	if (TWI_send(registro) != 0){
     650:	8c 2f       	mov	r24, r28
     652:	0e 94 32 02 	call	0x464	; 0x464 <TWI_send>
     656:	88 23       	and	r24, r24
     658:	29 f0       	breq	.+10     	; 0x664 <TWI_receive_16bit+0x3e>
		return TWSR & 0xF8;
     65a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     65e:	88 7f       	andi	r24, 0xF8	; 248
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	1b c0       	rjmp	.+54     	; 0x69a <TWI_receive_16bit+0x74>
	}

	if (TWI_start()!= 0){
     664:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     668:	88 23       	and	r24, r24
     66a:	29 f0       	breq	.+10     	; 0x676 <TWI_receive_16bit+0x50>
		return TWSR & 0xF8;
     66c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     670:	88 7f       	andi	r24, 0xF8	; 248
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	12 c0       	rjmp	.+36     	; 0x69a <TWI_receive_16bit+0x74>
	}
	
	if (TWI_address(1) != 0){
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     67c:	88 23       	and	r24, r24
     67e:	29 f0       	breq	.+10     	; 0x68a <TWI_receive_16bit+0x64>
		return TWSR & 0xF8;
     680:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     684:	88 7f       	andi	r24, 0xF8	; 248
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	08 c0       	rjmp	.+16     	; 0x69a <TWI_receive_16bit+0x74>
	}


	uint16_t data = 0;
	data = TWI_receive_ack()<<8;
     68a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
	data = TWI_receive_nack();
     68e:	0e 94 89 02 	call	0x512	; 0x512 <TWI_receive_nack>
		return TWSR & 0xF8;
	}
}

void TWI_stop(){
	TWCR =	(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     692:	94 e9       	ldi	r25, 0x94	; 148
     694:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	uint16_t data = 0;
	data = TWI_receive_ack()<<8;
	data = TWI_receive_nack();
	TWI_stop();
	return data;
     698:	90 e0       	ldi	r25, 0x00	; 0
}
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <read_acceleration>:
	
	return register_value;
}


int8_t read_acceleration(uint8_t calibrate_acc){
     69e:	cf 93       	push	r28
     6a0:	c8 2f       	mov	r28, r24
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     6a2:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     6a6:	81 11       	cpse	r24, r1
     6a8:	95 c0       	rjmp	.+298    	; 0x7d4 <read_acceleration+0x136>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     6aa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     6ae:	81 11       	cpse	r24, r1
     6b0:	93 c0       	rjmp	.+294    	; 0x7d8 <read_acceleration+0x13a>
		return -1;
	}

	if (TWI_send(0x3B) != 0){
     6b2:	8b e3       	ldi	r24, 0x3B	; 59
     6b4:	0e 94 32 02 	call	0x464	; 0x464 <TWI_send>
     6b8:	81 11       	cpse	r24, r1
     6ba:	90 c0       	rjmp	.+288    	; 0x7dc <read_acceleration+0x13e>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     6bc:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     6c0:	81 11       	cpse	r24, r1
     6c2:	8e c0       	rjmp	.+284    	; 0x7e0 <read_acceleration+0x142>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     6ca:	81 11       	cpse	r24, r1
     6cc:	8b c0       	rjmp	.+278    	; 0x7e4 <read_acceleration+0x146>
	acceleration.acceleration_y = TWI_receive_ack() << 8;
	acceleration.acceleration_y = acceleration.acceleration_y | TWI_receive_ack();
	acceleration.acceleration_z = TWI_receive_ack() << 8;
	acceleration.acceleration_z = acceleration.acceleration_z | TWI_receive_nack();*/

	acceleration_x = TWI_receive_ack() << 8;
     6ce:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	98 2f       	mov	r25, r24
     6d6:	88 27       	eor	r24, r24
     6d8:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <acceleration_x+0x1>
     6dc:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <acceleration_x>
	acceleration_x = acceleration_x | TWI_receive_ack();
     6e0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     6e4:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <acceleration_x>
     6e8:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <acceleration_x+0x1>
     6ec:	28 2b       	or	r18, r24
     6ee:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <acceleration_x+0x1>
     6f2:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <acceleration_x>
	acceleration_y = TWI_receive_ack() << 8;
     6f6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	98 2f       	mov	r25, r24
     6fe:	88 27       	eor	r24, r24
     700:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <acceleration_y+0x1>
     704:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <acceleration_y>
	acceleration_y = acceleration_y | TWI_receive_ack();
     708:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     70c:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <acceleration_y>
     710:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <acceleration_y+0x1>
     714:	28 2b       	or	r18, r24
     716:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <acceleration_y+0x1>
     71a:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <acceleration_y>
	acceleration_z = TWI_receive_ack() << 8;
     71e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	98 2f       	mov	r25, r24
     726:	88 27       	eor	r24, r24
     728:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <acceleration_z+0x1>
     72c:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <acceleration_z>
	acceleration_z = acceleration_z | TWI_receive_nack();
     730:	0e 94 89 02 	call	0x512	; 0x512 <TWI_receive_nack>
     734:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <acceleration_z>
     738:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <acceleration_z+0x1>
     73c:	28 2b       	or	r18, r24
     73e:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <acceleration_z+0x1>
     742:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <acceleration_z>
	TWI_stop();
     746:	0e 94 b4 02 	call	0x568	; 0x568 <TWI_stop>
	
	if (calibrate_acc == 1)
     74a:	c1 30       	cpi	r28, 0x01	; 1
     74c:	09 f0       	breq	.+2      	; 0x750 <read_acceleration+0xb2>
     74e:	4c c0       	rjmp	.+152    	; 0x7e8 <read_acceleration+0x14a>
	{

		acceleration_x = acceleration_x - x_offset_acc;
     750:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <acceleration_x>
     754:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <acceleration_x+0x1>
     758:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <x_offset_acc>
     75c:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <x_offset_acc+0x1>
     760:	82 1b       	sub	r24, r18
     762:	93 0b       	sbc	r25, r19
     764:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <acceleration_x+0x1>
     768:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <acceleration_x>
		
		acceleration_y = acceleration_y - y_offset_acc;
     76c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <acceleration_y>
     770:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <acceleration_y+0x1>
     774:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <y_offset_acc>
     778:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <y_offset_acc+0x1>
     77c:	82 1b       	sub	r24, r18
     77e:	93 0b       	sbc	r25, r19
     780:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <acceleration_y+0x1>
     784:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <acceleration_y>

		
		if (acceleration_z > z_offset_acc)
     788:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <acceleration_z>
     78c:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <acceleration_z+0x1>
     790:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     794:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     798:	82 17       	cp	r24, r18
     79a:	93 07       	cpc	r25, r19
     79c:	6c f4       	brge	.+26     	; 0x7b8 <read_acceleration+0x11a>
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
     79e:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <acceleration_z>
     7a2:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <acceleration_z+0x1>
     7a6:	30 52       	subi	r19, 0x20	; 32
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19
     7ac:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <acceleration_z+0x1>
     7b0:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <acceleration_z>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	19 c0       	rjmp	.+50     	; 0x7ea <read_acceleration+0x14c>
		
		if (acceleration_z > z_offset_acc)
		{
			acceleration_z = acceleration_z - 8192 + z_offset_acc;
			}else{
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
     7b8:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <acceleration_z>
     7bc:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <acceleration_z+0x1>
     7c0:	30 5e       	subi	r19, 0xE0	; 224
     7c2:	a9 01       	movw	r20, r18
     7c4:	48 1b       	sub	r20, r24
     7c6:	59 0b       	sbc	r21, r25
     7c8:	50 93 94 01 	sts	0x0194, r21	; 0x800194 <acceleration_z+0x1>
     7cc:	40 93 93 01 	sts	0x0193, r20	; 0x800193 <acceleration_z>
		}
		
	}
	
	return 0;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <read_acceleration+0x14c>


int8_t read_acceleration(uint8_t calibrate_acc){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <read_acceleration+0x14c>
	}
	
	if (TWI_address(0) != 0){
		return -1;
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	07 c0       	rjmp	.+14     	; 0x7ea <read_acceleration+0x14c>
	}

	if (TWI_send(0x3B) != 0){
		return -1;
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <read_acceleration+0x14c>
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <read_acceleration+0x14c>
	}
	
	if (TWI_address(1) != 0){
		return -1;
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <read_acceleration+0x14c>
			acceleration_z = acceleration_z + 8192 - z_offset_acc;
		}
		
	}
	
	return 0;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
}
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <read_gyroscope>:

int8_t read_gyroscope(){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     7ee:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     7f2:	81 11       	cpse	r24, r1
     7f4:	7c c0       	rjmp	.+248    	; 0x8ee <read_gyroscope+0x100>
		return -1;
	}
	
	if (TWI_address(0) != 0){
     7f6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     7fa:	81 11       	cpse	r24, r1
     7fc:	7a c0       	rjmp	.+244    	; 0x8f2 <read_gyroscope+0x104>
		return -1;
	}

	if (TWI_send(0x43) != 0){
     7fe:	83 e4       	ldi	r24, 0x43	; 67
     800:	0e 94 32 02 	call	0x464	; 0x464 <TWI_send>
     804:	81 11       	cpse	r24, r1
     806:	77 c0       	rjmp	.+238    	; 0x8f6 <read_gyroscope+0x108>
		return -1;
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
     808:	0e 94 cd 01 	call	0x39a	; 0x39a <TWI_start>
     80c:	81 11       	cpse	r24, r1
     80e:	75 c0       	rjmp	.+234    	; 0x8fa <read_gyroscope+0x10c>
		return -1;
	}
	
	if (TWI_address(1) != 0){
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TWI_address>
     816:	81 11       	cpse	r24, r1
     818:	72 c0       	rjmp	.+228    	; 0x8fe <read_gyroscope+0x110>
	gyroscope.gyroscope_y = TWI_receive_ack() << 8;
	gyroscope.gyroscope_y = gyroscope.gyroscope_y | TWI_receive_ack();
	gyroscope.gyroscope_z = TWI_receive_ack() << 8;
	gyroscope.gyroscope_z = gyroscope.gyroscope_z | TWI_receive_nack();*/

	gyroscope_x = TWI_receive_ack() << 8;
     81a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	98 2f       	mov	r25, r24
     822:	88 27       	eor	r24, r24
     824:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <gyroscope_x+0x1>
     828:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <gyroscope_x>
	gyroscope_x = gyroscope_x | TWI_receive_ack();
     82c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     830:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <gyroscope_x>
     834:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <gyroscope_x+0x1>
     838:	28 2b       	or	r18, r24
     83a:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <gyroscope_x+0x1>
     83e:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <gyroscope_x>
	gyroscope_y = TWI_receive_ack() << 8;
     842:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	98 2f       	mov	r25, r24
     84a:	88 27       	eor	r24, r24
     84c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <gyroscope_y+0x1>
     850:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <gyroscope_y>
	gyroscope_y = gyroscope_y | TWI_receive_ack();
     854:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     858:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <gyroscope_y>
     85c:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <gyroscope_y+0x1>
     860:	28 2b       	or	r18, r24
     862:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <gyroscope_y+0x1>
     866:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <gyroscope_y>
	gyroscope_z = TWI_receive_ack() << 8;
     86a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_receive_ack>
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	98 2f       	mov	r25, r24
     872:	88 27       	eor	r24, r24
     874:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <gyroscope_z+0x1>
     878:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <gyroscope_z>
	gyroscope_z = gyroscope_z | TWI_receive_nack();
     87c:	0e 94 89 02 	call	0x512	; 0x512 <TWI_receive_nack>
     880:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <gyroscope_z>
     884:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <gyroscope_z+0x1>
     888:	28 2b       	or	r18, r24
     88a:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <gyroscope_z+0x1>
     88e:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <gyroscope_z>
	
	gyroscope_x = gyroscope_x - x_offset_gyro;
     892:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <gyroscope_x>
     896:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <gyroscope_x+0x1>
     89a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <x_offset_gyro>
     89e:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <x_offset_gyro+0x1>
     8a2:	82 1b       	sub	r24, r18
     8a4:	93 0b       	sbc	r25, r19
     8a6:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <gyroscope_x+0x1>
     8aa:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <gyroscope_x>
	gyroscope_y = gyroscope_y - y_offset_gyro;
     8ae:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <gyroscope_y>
     8b2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <gyroscope_y+0x1>
     8b6:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <y_offset_gyro>
     8ba:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <y_offset_gyro+0x1>
     8be:	82 1b       	sub	r24, r18
     8c0:	93 0b       	sbc	r25, r19
     8c2:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <gyroscope_y+0x1>
     8c6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <gyroscope_y>
	gyroscope_z = gyroscope_z - z_offset_gyro;
     8ca:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <gyroscope_z>
     8ce:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <gyroscope_z+0x1>
     8d2:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <z_offset_gyro>
     8d6:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <z_offset_gyro+0x1>
     8da:	82 1b       	sub	r24, r18
     8dc:	93 0b       	sbc	r25, r19
     8de:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <gyroscope_z+0x1>
     8e2:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <gyroscope_z>
	
	TWI_stop();
     8e6:	0e 94 b4 02 	call	0x568	; 0x568 <TWI_stop>
	
	return 0;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	08 95       	ret
}

int8_t read_gyroscope(){
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	08 95       	ret
	}
	
	if (TWI_address(0) != 0){
		return -1;
     8f2:	8f ef       	ldi	r24, 0xFF	; 255
     8f4:	08 95       	ret
	}

	if (TWI_send(0x43) != 0){
		return -1;
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	08 95       	ret
	}
	
	if (TWI_start()!= 0){ //masking for prescaler bits|
		return -1;
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	08 95       	ret
	}
	
	if (TWI_address(1) != 0){
		return -1;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
	gyroscope_z = gyroscope_z - z_offset_gyro;
	
	TWI_stop();
	
	return 0;
}
     900:	08 95       	ret

00000902 <IMU_Init>:

int8_t IMU_Init(){
	uint8_t register_value;
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
     902:	62 e0       	ldi	r22, 0x02	; 2
     904:	8a e1       	ldi	r24, 0x1A	; 26
     906:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     90a:	81 11       	cpse	r24, r1
     90c:	6d c0       	rjmp	.+218    	; 0x9e8 <IMU_Init+0xe6>
	{
		return -1;
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
     90e:	68 e0       	ldi	r22, 0x08	; 8
     910:	8b e1       	ldi	r24, 0x1B	; 27
     912:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     916:	81 11       	cpse	r24, r1
     918:	69 c0       	rjmp	.+210    	; 0x9ec <IMU_Init+0xea>
	{
		return -1;
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
     91a:	68 e0       	ldi	r22, 0x08	; 8
     91c:	8c e1       	ldi	r24, 0x1C	; 28
     91e:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     922:	81 11       	cpse	r24, r1
     924:	65 c0       	rjmp	.+202    	; 0x9f0 <IMU_Init+0xee>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	83 e2       	ldi	r24, 0x23	; 35
     92a:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     92e:	81 11       	cpse	r24, r1
     930:	61 c0       	rjmp	.+194    	; 0x9f4 <IMU_Init+0xf2>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	84 e2       	ldi	r24, 0x24	; 36
     936:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     93a:	81 11       	cpse	r24, r1
     93c:	5d c0       	rjmp	.+186    	; 0x9f8 <IMU_Init+0xf6>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	87 e3       	ldi	r24, 0x37	; 55
     942:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     946:	81 11       	cpse	r24, r1
     948:	59 c0       	rjmp	.+178    	; 0x9fc <IMU_Init+0xfa>
	{
		return -1;
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	88 e3       	ldi	r24, 0x38	; 56
     94e:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     952:	81 11       	cpse	r24, r1
     954:	55 c0       	rjmp	.+170    	; 0xa00 <IMU_Init+0xfe>
	{
		return -1;
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	8a e6       	ldi	r24, 0x6A	; 106
     95a:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     95e:	81 11       	cpse	r24, r1
     960:	51 c0       	rjmp	.+162    	; 0xa04 <IMU_Init+0x102>
	{
		return -1;
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	8b e6       	ldi	r24, 0x6B	; 107
     966:	0e 94 b8 02 	call	0x570	; 0x570 <TWI_send_16bit>
     96a:	81 11       	cpse	r24, r1
     96c:	4d c0       	rjmp	.+154    	; 0xa08 <IMU_Init+0x106>
	{
		return -1;
	}
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
     96e:	85 e7       	ldi	r24, 0x75	; 117
     970:	0e 94 df 02 	call	0x5be	; 0x5be <TWI_receive_8bit>
	
	if (register_value != 0x68)
     974:	88 36       	cpi	r24, 0x68	; 104
     976:	09 f0       	breq	.+2      	; 0x97a <IMU_Init+0x78>
     978:	49 c0       	rjmp	.+146    	; 0xa0c <IMU_Init+0x10a>
	{
		return -2;
	}
	
	
	read_acceleration(0);
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 4f 03 	call	0x69e	; 0x69e <read_acceleration>
	x_offset_acc = acceleration_x;
     980:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <acceleration_x>
     984:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <acceleration_x+0x1>
     988:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <x_offset_acc+0x1>
     98c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <x_offset_acc>
	y_offset_acc = acceleration_y;
     990:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <acceleration_y>
     994:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <acceleration_y+0x1>
     998:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <y_offset_acc+0x1>
     99c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <y_offset_acc>
	z_offset_acc = acceleration_z;
     9a0:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <acceleration_z>
     9a4:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <acceleration_z+0x1>
     9a8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
     9ac:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	
	read_gyroscope();
     9b0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <read_gyroscope>
	x_offset_gyro = gyroscope_x;
     9b4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <gyroscope_x>
     9b8:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <gyroscope_x+0x1>
     9bc:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <x_offset_gyro+0x1>
     9c0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <x_offset_gyro>
	y_offset_gyro = gyroscope_y;
     9c4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <gyroscope_y>
     9c8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <gyroscope_y+0x1>
     9cc:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <y_offset_gyro+0x1>
     9d0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <y_offset_gyro>
	z_offset_gyro = gyroscope_z;
     9d4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <gyroscope_z>
     9d8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <gyroscope_z+0x1>
     9dc:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <z_offset_gyro+0x1>
     9e0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <z_offset_gyro>
	// 	read_acceleration(1);
	//
	// 	Angle_X_Gyro = Angle_Y_Acc;
	// 	Angle_Y_Gyro = Angle_X_Acc;
	
	return register_value;
     9e4:	88 e6       	ldi	r24, 0x68	; 104
     9e6:	08 95       	ret
	uint8_t register_value;
	
	register_value = 0b00000010;//config DLPF
	if (TWI_send_16bit(0x1a, register_value) != 0)
	{
		return -1;
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	08 95       	ret
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 1000rad/s
	if (TWI_send_16bit(0x1b, register_value) != 0)
	{
		return -1;
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	08 95       	ret
	}
	register_value = (unsigned char) 0b00001000; //Full scale range gyro, 4g
	if (TWI_send_16bit(0x1c, register_value) != 0)
	{
		return -1;
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	08 95       	ret
	}
	register_value = 0b00000000; //Disable FIFO
	if (TWI_send_16bit(0x23, register_value) != 0)
	{
		return -1;
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	08 95       	ret
	}
	register_value = 0b00000000; //Disable multi master
	if (TWI_send_16bit(0x24, register_value) != 0)
	{
		return -1;
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x37, register_value) != 0)
	{
		return -1;
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	08 95       	ret
	}
	register_value = 0b00000000; //Disable interrupts
	if (TWI_send_16bit(0x38, register_value) != 0)
	{
		return -1;
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	08 95       	ret
	}
	register_value = 0b00000000; //User CTRL
	if (TWI_send_16bit(0x6a, register_value) != 0)
	{
		return -1;
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	08 95       	ret
	}
	register_value = 0b00000001; //Setting gyro clock source
	if (TWI_send_16bit(0x6b, register_value) != 0)
	{
		return -1;
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	08 95       	ret
	
	register_value = TWI_receive_8bit(0x75); //who I am confirmation
	
	if (register_value != 0x68)
	{
		return -2;
     a0c:	8e ef       	ldi	r24, 0xFE	; 254
	//
	// 	Angle_X_Gyro = Angle_Y_Acc;
	// 	Angle_Y_Gyro = Angle_X_Acc;
	
	return register_value;
}
     a0e:	08 95       	ret

00000a10 <IMU_who_i_am>:
	TWI_stop();
	
	return 0;
}

uint8_t IMU_who_i_am(uint8_t print){
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	d8 2f       	mov	r29, r24
	uint8_t whoiam = TWI_receive_8bit(0x75);
     a16:	85 e7       	ldi	r24, 0x75	; 117
     a18:	0e 94 df 02 	call	0x5be	; 0x5be <TWI_receive_8bit>
     a1c:	c8 2f       	mov	r28, r24
	
	if (print == 1)
     a1e:	d1 30       	cpi	r29, 0x01	; 1
     a20:	29 f4       	brne	.+10     	; 0xa2c <IMU_who_i_am+0x1c>
	{
		USART_Transmit(whoiam);
     a22:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit('\n');
     a26:	8a e0       	ldi	r24, 0x0A	; 10
     a28:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	}
	
	return whoiam;
}
     a2c:	8c 2f       	mov	r24, r28
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <temperature>:

int8_t temperature(uint8_t print){
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	d8 2f       	mov	r29, r24
	int8_t temperature_read = (((float) TWI_receive_16bit(0x3b))/340 + 36.53);
     a3a:	8b e3       	ldi	r24, 0x3B	; 59
     a3c:	0e 94 13 03 	call	0x626	; 0x626 <TWI_receive_16bit>
     a40:	bc 01       	movw	r22, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 3c 12 	call	0x2478	; 0x2478 <__floatunsisf>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	4a ea       	ldi	r20, 0xAA	; 170
     a50:	53 e4       	ldi	r21, 0x43	; 67
     a52:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     a56:	28 eb       	ldi	r18, 0xB8	; 184
     a58:	3e e1       	ldi	r19, 0x1E	; 30
     a5a:	42 e1       	ldi	r20, 0x12	; 18
     a5c:	52 e4       	ldi	r21, 0x42	; 66
     a5e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
     a62:	0e 94 06 12 	call	0x240c	; 0x240c <__fixsfsi>
     a66:	c6 2f       	mov	r28, r22
	
	if (print == 1)
     a68:	d1 30       	cpi	r29, 0x01	; 1
     a6a:	31 f4       	brne	.+12     	; 0xa78 <temperature+0x44>
	{
		USART_Transmit(temperature_read);
     a6c:	86 2f       	mov	r24, r22
     a6e:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit('\n');
     a72:	8a e0       	ldi	r24, 0x0A	; 10
     a74:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	}
	
	return temperature_read;
}
     a78:	8c 2f       	mov	r24, r28
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <computed_acceleration>:

void computed_acceleration(uint8_t print){
     a80:	cf 93       	push	r28
     a82:	c8 2f       	mov	r28, r24
	accx = ((float) acceleration_x / 8192) * 98.1;
     a84:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <acceleration_x>
     a88:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <acceleration_x+0x1>
     a8c:	07 2e       	mov	r0, r23
     a8e:	00 0c       	add	r0, r0
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	59 e3       	ldi	r21, 0x39	; 57
     aa0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     aa4:	23 e3       	ldi	r18, 0x33	; 51
     aa6:	33 e3       	ldi	r19, 0x33	; 51
     aa8:	44 ec       	ldi	r20, 0xC4	; 196
     aaa:	52 e4       	ldi	r21, 0x42	; 66
     aac:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     ab0:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <accx>
     ab4:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <accx+0x1>
     ab8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <accx+0x2>
     abc:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <accx+0x3>
	accy = ((float) acceleration_y / 8192) * 98.1;
     ac0:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <acceleration_y>
     ac4:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <acceleration_y+0x1>
     ac8:	07 2e       	mov	r0, r23
     aca:	00 0c       	add	r0, r0
     acc:	88 0b       	sbc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	59 e3       	ldi	r21, 0x39	; 57
     adc:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     ae0:	23 e3       	ldi	r18, 0x33	; 51
     ae2:	33 e3       	ldi	r19, 0x33	; 51
     ae4:	44 ec       	ldi	r20, 0xC4	; 196
     ae6:	52 e4       	ldi	r21, 0x42	; 66
     ae8:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     aec:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <accy>
     af0:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <accy+0x1>
     af4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <accy+0x2>
     af8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <accy+0x3>
	accz = ((float) acceleration_z / 8192) * 98.1;
     afc:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <acceleration_z>
     b00:	70 91 94 01 	lds	r23, 0x0194	; 0x800194 <acceleration_z+0x1>
     b04:	07 2e       	mov	r0, r23
     b06:	00 0c       	add	r0, r0
     b08:	88 0b       	sbc	r24, r24
     b0a:	99 0b       	sbc	r25, r25
     b0c:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	59 e3       	ldi	r21, 0x39	; 57
     b18:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     b1c:	23 e3       	ldi	r18, 0x33	; 51
     b1e:	33 e3       	ldi	r19, 0x33	; 51
     b20:	44 ec       	ldi	r20, 0xC4	; 196
     b22:	52 e4       	ldi	r21, 0x42	; 66
     b24:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     b28:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <accz>
     b2c:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <accz+0x1>
     b30:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <accz+0x2>
     b34:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <accz+0x3>
	
	if (print == 1)
     b38:	c1 30       	cpi	r28, 0x01	; 1
     b3a:	51 f5       	brne	.+84     	; 0xb90 <__stack+0x91>
	{
		USART_Transmit(accx);
     b3c:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <accx>
     b40:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <accx+0x1>
     b44:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <accx+0x2>
     b48:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <accx+0x3>
     b4c:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     b50:	86 2f       	mov	r24, r22
     b52:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit(accy);
     b56:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <accy>
     b5a:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <accy+0x1>
     b5e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <accy+0x2>
     b62:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <accy+0x3>
     b66:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     b6a:	86 2f       	mov	r24, r22
     b6c:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit(accz);
     b70:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <accz>
     b74:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <accz+0x1>
     b78:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <accz+0x2>
     b7c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <accz+0x3>
     b80:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     b84:	86 2f       	mov	r24, r22
     b86:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit('\n');
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	}
}
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <computed_gyroscope>:

void computed_gyroscope(uint8_t print){
     b94:	cf 93       	push	r28
     b96:	c8 2f       	mov	r28, r24
	gyrox = ((float) gyroscope_x / 65);
     b98:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <gyroscope_x>
     b9c:	70 91 8a 01 	lds	r23, 0x018A	; 0x80018a <gyroscope_x+0x1>
     ba0:	07 2e       	mov	r0, r23
     ba2:	00 0c       	add	r0, r0
     ba4:	88 0b       	sbc	r24, r24
     ba6:	99 0b       	sbc	r25, r25
     ba8:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	42 e8       	ldi	r20, 0x82	; 130
     bb2:	52 e4       	ldi	r21, 0x42	; 66
     bb4:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     bb8:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <gyrox>
     bbc:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <gyrox+0x1>
     bc0:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gyrox+0x2>
     bc4:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gyrox+0x3>
	gyroy = ((float) gyroscope_y / 65);
     bc8:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <gyroscope_y>
     bcc:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <gyroscope_y+0x1>
     bd0:	07 2e       	mov	r0, r23
     bd2:	00 0c       	add	r0, r0
     bd4:	88 0b       	sbc	r24, r24
     bd6:	99 0b       	sbc	r25, r25
     bd8:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	42 e8       	ldi	r20, 0x82	; 130
     be2:	52 e4       	ldi	r21, 0x42	; 66
     be4:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     be8:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <gyroy>
     bec:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <gyroy+0x1>
     bf0:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <gyroy+0x2>
     bf4:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <gyroy+0x3>
	gyroz = ((float) gyroscope_z / 65);
     bf8:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <gyroscope_z>
     bfc:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <gyroscope_z+0x1>
     c00:	07 2e       	mov	r0, r23
     c02:	00 0c       	add	r0, r0
     c04:	88 0b       	sbc	r24, r24
     c06:	99 0b       	sbc	r25, r25
     c08:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	42 e8       	ldi	r20, 0x82	; 130
     c12:	52 e4       	ldi	r21, 0x42	; 66
     c14:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     c18:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <gyroz>
     c1c:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <gyroz+0x1>
     c20:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <gyroz+0x2>
     c24:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <gyroz+0x3>
	
	if (print == 1)
     c28:	c1 30       	cpi	r28, 0x01	; 1
     c2a:	51 f5       	brne	.+84     	; 0xc80 <computed_gyroscope+0xec>
	{
		USART_Transmit(gyrox);
     c2c:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <gyrox>
     c30:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <gyrox+0x1>
     c34:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <gyrox+0x2>
     c38:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <gyrox+0x3>
     c3c:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     c40:	86 2f       	mov	r24, r22
     c42:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit(gyroy);
     c46:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <gyroy>
     c4a:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <gyroy+0x1>
     c4e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <gyroy+0x2>
     c52:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <gyroy+0x3>
     c56:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     c5a:	86 2f       	mov	r24, r22
     c5c:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit(gyroz);
     c60:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <gyroz>
     c64:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <gyroz+0x1>
     c68:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <gyroz+0x2>
     c6c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <gyroz+0x3>
     c70:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     c74:	86 2f       	mov	r24, r22
     c76:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit('\n');
     c7a:	8a e0       	ldi	r24, 0x0A	; 10
     c7c:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	}
}
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <compute_angle_acc>:

void compute_angle_acc(uint8_t print){
     c84:	4f 92       	push	r4
     c86:	5f 92       	push	r5
     c88:	6f 92       	push	r6
     c8a:	7f 92       	push	r7
     c8c:	8f 92       	push	r8
     c8e:	9f 92       	push	r9
     c90:	af 92       	push	r10
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	2d 97       	sbiw	r28, 0x0d	; 13
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	8d 87       	std	Y+13, r24	; 0x0d
	
	Angle_X_Acc = (int8_t) (atan(accx/sqrt(accy*accy+accz*accz))*180/3.1415); //transform from radiants to degree
     cb2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <accx>
     cb6:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <accx+0x1>
     cba:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <accx+0x2>
     cbe:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <accx+0x3>
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	9e 83       	std	Y+6, r25	; 0x06
     cc6:	af 83       	std	Y+7, r26	; 0x07
     cc8:	b8 87       	std	Y+8, r27	; 0x08
     cca:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <accy>
     cce:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <accy+0x1>
     cd2:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <accy+0x2>
     cd6:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <accy+0x3>
     cda:	80 90 7c 01 	lds	r8, 0x017C	; 0x80017c <accy>
     cde:	90 90 7d 01 	lds	r9, 0x017D	; 0x80017d <accy+0x1>
     ce2:	a0 90 7e 01 	lds	r10, 0x017E	; 0x80017e <accy+0x2>
     ce6:	b0 90 7f 01 	lds	r11, 0x017F	; 0x80017f <accy+0x3>
     cea:	40 90 98 01 	lds	r4, 0x0198	; 0x800198 <accz>
     cee:	50 90 99 01 	lds	r5, 0x0199	; 0x800199 <accz+0x1>
     cf2:	60 90 9a 01 	lds	r6, 0x019A	; 0x80019a <accz+0x2>
     cf6:	70 90 9b 01 	lds	r7, 0x019B	; 0x80019b <accz+0x3>
     cfa:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <accz>
     cfe:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <accz+0x1>
     d02:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <accz+0x2>
     d06:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <accz+0x3>
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	ab 83       	std	Y+3, r26	; 0x03
     d10:	bc 83       	std	Y+4, r27	; 0x04
     d12:	a5 01       	movw	r20, r10
     d14:	94 01       	movw	r18, r8
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     d1e:	69 87       	std	Y+9, r22	; 0x09
     d20:	7a 87       	std	Y+10, r23	; 0x0a
     d22:	8b 87       	std	Y+11, r24	; 0x0b
     d24:	9c 87       	std	Y+12, r25	; 0x0c
     d26:	a5 01       	movw	r20, r10
     d28:	94 01       	movw	r18, r8
     d2a:	c7 01       	movw	r24, r14
     d2c:	b6 01       	movw	r22, r12
     d2e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     d32:	6b 01       	movw	r12, r22
     d34:	7c 01       	movw	r14, r24
     d36:	29 81       	ldd	r18, Y+1	; 0x01
     d38:	3a 81       	ldd	r19, Y+2	; 0x02
     d3a:	4b 81       	ldd	r20, Y+3	; 0x03
     d3c:	5c 81       	ldd	r21, Y+4	; 0x04
     d3e:	c3 01       	movw	r24, r6
     d40:	b2 01       	movw	r22, r4
     d42:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	c7 01       	movw	r24, r14
     d4c:	b6 01       	movw	r22, r12
     d4e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
     d52:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <sqrt>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	6d 81       	ldd	r22, Y+5	; 0x05
     d5c:	7e 81       	ldd	r23, Y+6	; 0x06
     d5e:	8f 81       	ldd	r24, Y+7	; 0x07
     d60:	98 85       	ldd	r25, Y+8	; 0x08
     d62:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     d66:	0e 94 65 11 	call	0x22ca	; 0x22ca <atan>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	44 e3       	ldi	r20, 0x34	; 52
     d70:	53 e4       	ldi	r21, 0x43	; 67
     d72:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     d76:	26 e5       	ldi	r18, 0x56	; 86
     d78:	3e e0       	ldi	r19, 0x0E	; 14
     d7a:	49 e4       	ldi	r20, 0x49	; 73
     d7c:	50 e4       	ldi	r21, 0x40	; 64
     d7e:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     d82:	0e 94 06 12 	call	0x240c	; 0x240c <__fixsfsi>
     d86:	06 2e       	mov	r0, r22
     d88:	00 0c       	add	r0, r0
     d8a:	77 0b       	sbc	r23, r23
     d8c:	88 0b       	sbc	r24, r24
     d8e:	99 0b       	sbc	r25, r25
     d90:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     d94:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <Angle_X_Acc>
     d98:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <Angle_X_Acc+0x1>
     d9c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <Angle_X_Acc+0x2>
     da0:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <Angle_X_Acc+0x3>
	Angle_Y_Acc = (int8_t) (atan(accy/sqrt(accx*accx+accz*accz))*180/3.1415); //transform from radiants to degree
     da4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <accy>
     da8:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <accy+0x1>
     dac:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <accy+0x2>
     db0:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <accy+0x3>
     db4:	8d 83       	std	Y+5, r24	; 0x05
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	af 83       	std	Y+7, r26	; 0x07
     dba:	b8 87       	std	Y+8, r27	; 0x08
     dbc:	c0 90 a4 01 	lds	r12, 0x01A4	; 0x8001a4 <accx>
     dc0:	d0 90 a5 01 	lds	r13, 0x01A5	; 0x8001a5 <accx+0x1>
     dc4:	e0 90 a6 01 	lds	r14, 0x01A6	; 0x8001a6 <accx+0x2>
     dc8:	f0 90 a7 01 	lds	r15, 0x01A7	; 0x8001a7 <accx+0x3>
     dcc:	80 90 a4 01 	lds	r8, 0x01A4	; 0x8001a4 <accx>
     dd0:	90 90 a5 01 	lds	r9, 0x01A5	; 0x8001a5 <accx+0x1>
     dd4:	a0 90 a6 01 	lds	r10, 0x01A6	; 0x8001a6 <accx+0x2>
     dd8:	b0 90 a7 01 	lds	r11, 0x01A7	; 0x8001a7 <accx+0x3>
     ddc:	40 90 98 01 	lds	r4, 0x0198	; 0x800198 <accz>
     de0:	50 90 99 01 	lds	r5, 0x0199	; 0x800199 <accz+0x1>
     de4:	60 90 9a 01 	lds	r6, 0x019A	; 0x80019a <accz+0x2>
     de8:	70 90 9b 01 	lds	r7, 0x019B	; 0x80019b <accz+0x3>
     dec:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <accz>
     df0:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <accz+0x1>
     df4:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <accz+0x2>
     df8:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <accz+0x3>
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	ab 83       	std	Y+3, r26	; 0x03
     e02:	bc 83       	std	Y+4, r27	; 0x04
     e04:	a5 01       	movw	r20, r10
     e06:	94 01       	movw	r18, r8
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     e10:	69 87       	std	Y+9, r22	; 0x09
     e12:	7a 87       	std	Y+10, r23	; 0x0a
     e14:	8b 87       	std	Y+11, r24	; 0x0b
     e16:	9c 87       	std	Y+12, r25	; 0x0c
     e18:	a5 01       	movw	r20, r10
     e1a:	94 01       	movw	r18, r8
     e1c:	c7 01       	movw	r24, r14
     e1e:	b6 01       	movw	r22, r12
     e20:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     e24:	6b 01       	movw	r12, r22
     e26:	7c 01       	movw	r14, r24
     e28:	29 81       	ldd	r18, Y+1	; 0x01
     e2a:	3a 81       	ldd	r19, Y+2	; 0x02
     e2c:	4b 81       	ldd	r20, Y+3	; 0x03
     e2e:	5c 81       	ldd	r21, Y+4	; 0x04
     e30:	c3 01       	movw	r24, r6
     e32:	b2 01       	movw	r22, r4
     e34:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     e38:	9b 01       	movw	r18, r22
     e3a:	ac 01       	movw	r20, r24
     e3c:	c7 01       	movw	r24, r14
     e3e:	b6 01       	movw	r22, r12
     e40:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
     e44:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <sqrt>
     e48:	9b 01       	movw	r18, r22
     e4a:	ac 01       	movw	r20, r24
     e4c:	6d 81       	ldd	r22, Y+5	; 0x05
     e4e:	7e 81       	ldd	r23, Y+6	; 0x06
     e50:	8f 81       	ldd	r24, Y+7	; 0x07
     e52:	98 85       	ldd	r25, Y+8	; 0x08
     e54:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     e58:	0e 94 65 11 	call	0x22ca	; 0x22ca <atan>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	44 e3       	ldi	r20, 0x34	; 52
     e62:	53 e4       	ldi	r21, 0x43	; 67
     e64:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     e68:	26 e5       	ldi	r18, 0x56	; 86
     e6a:	3e e0       	ldi	r19, 0x0E	; 14
     e6c:	49 e4       	ldi	r20, 0x49	; 73
     e6e:	50 e4       	ldi	r21, 0x40	; 64
     e70:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     e74:	0e 94 06 12 	call	0x240c	; 0x240c <__fixsfsi>
     e78:	06 2e       	mov	r0, r22
     e7a:	00 0c       	add	r0, r0
     e7c:	77 0b       	sbc	r23, r23
     e7e:	88 0b       	sbc	r24, r24
     e80:	99 0b       	sbc	r25, r25
     e82:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     e86:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <Angle_Y_Acc>
     e8a:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <Angle_Y_Acc+0x1>
     e8e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <Angle_Y_Acc+0x2>
     e92:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <Angle_Y_Acc+0x3>
	
	if (print == 1)
     e96:	9d 85       	ldd	r25, Y+13	; 0x0d
     e98:	91 30       	cpi	r25, 0x01	; 1
     e9a:	e9 f4       	brne	.+58     	; 0xed6 <compute_angle_acc+0x252>
	{
		USART_Transmit(Angle_X_Acc);
     e9c:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <Angle_X_Acc>
     ea0:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <Angle_X_Acc+0x1>
     ea4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Angle_X_Acc+0x2>
     ea8:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <Angle_X_Acc+0x3>
     eac:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     eb0:	86 2f       	mov	r24, r22
     eb2:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit(Angle_Y_Acc);
     eb6:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <Angle_Y_Acc>
     eba:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <Angle_Y_Acc+0x1>
     ebe:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Angle_Y_Acc+0x2>
     ec2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <Angle_Y_Acc+0x3>
     ec6:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
     eca:	86 2f       	mov	r24, r22
     ecc:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit('\n');
     ed0:	8a e0       	ldi	r24, 0x0A	; 10
     ed2:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	}
}
     ed6:	2d 96       	adiw	r28, 0x0d	; 13
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	9f 90       	pop	r9
     ef4:	8f 90       	pop	r8
     ef6:	7f 90       	pop	r7
     ef8:	6f 90       	pop	r6
     efa:	5f 90       	pop	r5
     efc:	4f 90       	pop	r4
     efe:	08 95       	ret

00000f00 <compute_angle_gyro>:

void compute_angle_gyro(uint8_t print){
     f00:	8f 92       	push	r8
     f02:	9f 92       	push	r9
     f04:	af 92       	push	r10
     f06:	bf 92       	push	r11
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	cf 93       	push	r28
     f12:	c8 2f       	mov	r28, r24
	
	gyrox = ((float) gyroscope_x / 65);
     f14:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <gyroscope_x>
     f18:	70 91 8a 01 	lds	r23, 0x018A	; 0x80018a <gyroscope_x+0x1>
     f1c:	07 2e       	mov	r0, r23
     f1e:	00 0c       	add	r0, r0
     f20:	88 0b       	sbc	r24, r24
     f22:	99 0b       	sbc	r25, r25
     f24:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	42 e8       	ldi	r20, 0x82	; 130
     f2e:	52 e4       	ldi	r21, 0x42	; 66
     f30:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     f34:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <gyrox>
     f38:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <gyrox+0x1>
     f3c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gyrox+0x2>
     f40:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gyrox+0x3>
	gyroy = ((float) gyroscope_y / 65);
     f44:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <gyroscope_y>
     f48:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <gyroscope_y+0x1>
     f4c:	07 2e       	mov	r0, r23
     f4e:	00 0c       	add	r0, r0
     f50:	88 0b       	sbc	r24, r24
     f52:	99 0b       	sbc	r25, r25
     f54:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	42 e8       	ldi	r20, 0x82	; 130
     f5e:	52 e4       	ldi	r21, 0x42	; 66
     f60:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     f64:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <gyroy>
     f68:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <gyroy+0x1>
     f6c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <gyroy+0x2>
     f70:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <gyroy+0x3>
	gyroz = ((float) gyroscope_z / 65);
     f74:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <gyroscope_z>
     f78:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <gyroscope_z+0x1>
     f7c:	07 2e       	mov	r0, r23
     f7e:	00 0c       	add	r0, r0
     f80:	88 0b       	sbc	r24, r24
     f82:	99 0b       	sbc	r25, r25
     f84:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	42 e8       	ldi	r20, 0x82	; 130
     f8e:	52 e4       	ldi	r21, 0x42	; 66
     f90:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
     f94:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <gyroz>
     f98:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <gyroz+0x1>
     f9c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <gyroz+0x2>
     fa0:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <gyroz+0x3>
	
	float delta_time = system_tick_MG + 0.0000041*TCNT0 - last_sample_gyro;
     fa4:	66 b5       	in	r22, 0x26	; 38
     fa6:	80 90 62 01 	lds	r8, 0x0162	; 0x800162 <system_tick_MG>
     faa:	90 90 63 01 	lds	r9, 0x0163	; 0x800163 <system_tick_MG+0x1>
     fae:	a0 90 64 01 	lds	r10, 0x0164	; 0x800164 <system_tick_MG+0x2>
     fb2:	b0 90 65 01 	lds	r11, 0x0165	; 0x800165 <system_tick_MG+0x3>
     fb6:	c0 90 66 01 	lds	r12, 0x0166	; 0x800166 <last_sample_gyro>
     fba:	d0 90 67 01 	lds	r13, 0x0167	; 0x800167 <last_sample_gyro+0x1>
     fbe:	e0 90 68 01 	lds	r14, 0x0168	; 0x800168 <last_sample_gyro+0x2>
     fc2:	f0 90 69 01 	lds	r15, 0x0169	; 0x800169 <last_sample_gyro+0x3>
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
     fd0:	2b eb       	ldi	r18, 0xBB	; 187
     fd2:	32 e9       	ldi	r19, 0x92	; 146
     fd4:	49 e8       	ldi	r20, 0x89	; 137
     fd6:	56 e3       	ldi	r21, 0x36	; 54
     fd8:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     fdc:	a5 01       	movw	r20, r10
     fde:	94 01       	movw	r18, r8
     fe0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
     fe4:	a7 01       	movw	r20, r14
     fe6:	96 01       	movw	r18, r12
     fe8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
     fec:	6b 01       	movw	r12, r22
     fee:	7c 01       	movw	r14, r24
	
	Angle_X_Gyro = Angle_X_Gyro + gyrox*delta_time; //transform from radiants to degree
     ff0:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <gyrox>
     ff4:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <gyrox+0x1>
     ff8:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <gyrox+0x2>
     ffc:	50 91 a3 01 	lds	r21, 0x01A3	; 0x8001a3 <gyrox+0x3>
    1000:	80 90 36 01 	lds	r8, 0x0136	; 0x800136 <Angle_X_Gyro>
    1004:	90 90 37 01 	lds	r9, 0x0137	; 0x800137 <Angle_X_Gyro+0x1>
    1008:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <Angle_X_Gyro+0x2>
    100c:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <Angle_X_Gyro+0x3>
    1010:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1014:	a5 01       	movw	r20, r10
    1016:	94 01       	movw	r18, r8
    1018:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    101c:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <Angle_X_Gyro>
    1020:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <Angle_X_Gyro+0x1>
    1024:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Angle_X_Gyro+0x2>
    1028:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Angle_X_Gyro+0x3>
	Angle_Y_Gyro = Angle_Y_Gyro + gyroy*delta_time;  //transform from radiants to degree
    102c:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <gyroy>
    1030:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <gyroy+0x1>
    1034:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <gyroy+0x2>
    1038:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <gyroy+0x3>
    103c:	80 90 32 01 	lds	r8, 0x0132	; 0x800132 <Angle_Y_Gyro>
    1040:	90 90 33 01 	lds	r9, 0x0133	; 0x800133 <Angle_Y_Gyro+0x1>
    1044:	a0 90 34 01 	lds	r10, 0x0134	; 0x800134 <Angle_Y_Gyro+0x2>
    1048:	b0 90 35 01 	lds	r11, 0x0135	; 0x800135 <Angle_Y_Gyro+0x3>
    104c:	c7 01       	movw	r24, r14
    104e:	b6 01       	movw	r22, r12
    1050:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1054:	a5 01       	movw	r20, r10
    1056:	94 01       	movw	r18, r8
    1058:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    105c:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <Angle_Y_Gyro>
    1060:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <Angle_Y_Gyro+0x1>
    1064:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Angle_Y_Gyro+0x2>
    1068:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <Angle_Y_Gyro+0x3>

	last_sample_gyro = system_tick_MG + 0.0000041*TCNT0;
    106c:	66 b5       	in	r22, 0x26	; 38
    106e:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <system_tick_MG>
    1072:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1076:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <system_tick_MG+0x2>
    107a:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <system_tick_MG+0x3>
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1088:	2b eb       	ldi	r18, 0xBB	; 187
    108a:	32 e9       	ldi	r19, 0x92	; 146
    108c:	49 e8       	ldi	r20, 0x89	; 137
    108e:	56 e3       	ldi	r21, 0x36	; 54
    1090:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1094:	a7 01       	movw	r20, r14
    1096:	96 01       	movw	r18, r12
    1098:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    109c:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <last_sample_gyro>
    10a0:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <last_sample_gyro+0x1>
    10a4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <last_sample_gyro+0x2>
    10a8:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <last_sample_gyro+0x3>
	
	if (print ==1)
    10ac:	c1 30       	cpi	r28, 0x01	; 1
    10ae:	01 f5       	brne	.+64     	; 0x10f0 <compute_angle_gyro+0x1f0>
	{
		USART_Transmit(Angle_X_Gyro);
    10b0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Angle_X_Gyro>
    10b4:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <Angle_X_Gyro+0x1>
    10b8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Angle_X_Gyro+0x2>
    10bc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Angle_X_Gyro+0x3>
    10c0:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    10c4:	86 2f       	mov	r24, r22
    10c6:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit(-Angle_Y_Gyro);
    10ca:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <Angle_Y_Gyro>
    10ce:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <Angle_Y_Gyro+0x1>
    10d2:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <Angle_Y_Gyro+0x2>
    10d6:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <Angle_Y_Gyro+0x3>
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	90 58       	subi	r25, 0x80	; 128
    10e0:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    10e4:	86 2f       	mov	r24, r22
    10e6:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit('\n');
    10ea:	8a e0       	ldi	r24, 0x0A	; 10
    10ec:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	}
}
    10f0:	cf 91       	pop	r28
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	9f 90       	pop	r9
    1100:	8f 90       	pop	r8
    1102:	08 95       	ret

00001104 <angle_filtered>:

float x_acc_k, y_acc_k, z_acc_k;
float x_gyro_k, y_gyro_k, z_gyro_k;


void angle_filtered(uint8_t print){
    1104:	8f 92       	push	r8
    1106:	9f 92       	push	r9
    1108:	af 92       	push	r10
    110a:	bf 92       	push	r11
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	cf 93       	push	r28
    1116:	c8 2f       	mov	r28, r24
	AngleX = 0.05*Angle_X_Acc - 0.95*Angle_Y_Gyro; //Right math, wrong variable names - to correct in future version
    1118:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <Angle_X_Acc>
    111c:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <Angle_X_Acc+0x1>
    1120:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Angle_X_Acc+0x2>
    1124:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <Angle_X_Acc+0x3>
    1128:	80 90 32 01 	lds	r8, 0x0132	; 0x800132 <Angle_Y_Gyro>
    112c:	90 90 33 01 	lds	r9, 0x0133	; 0x800133 <Angle_Y_Gyro+0x1>
    1130:	a0 90 34 01 	lds	r10, 0x0134	; 0x800134 <Angle_Y_Gyro+0x2>
    1134:	b0 90 35 01 	lds	r11, 0x0135	; 0x800135 <Angle_Y_Gyro+0x3>
    1138:	2d ec       	ldi	r18, 0xCD	; 205
    113a:	3c ec       	ldi	r19, 0xCC	; 204
    113c:	4c e4       	ldi	r20, 0x4C	; 76
    113e:	5d e3       	ldi	r21, 0x3D	; 61
    1140:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1144:	6b 01       	movw	r12, r22
    1146:	7c 01       	movw	r14, r24
    1148:	23 e3       	ldi	r18, 0x33	; 51
    114a:	33 e3       	ldi	r19, 0x33	; 51
    114c:	43 e7       	ldi	r20, 0x73	; 115
    114e:	5f e3       	ldi	r21, 0x3F	; 63
    1150:	c5 01       	movw	r24, r10
    1152:	b4 01       	movw	r22, r8
    1154:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	c7 01       	movw	r24, r14
    115e:	b6 01       	movw	r22, r12
    1160:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    1164:	0e 94 06 12 	call	0x240c	; 0x240c <__fixsfsi>
    1168:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <AngleX>
	AngleY = 0.05*Angle_Y_Acc + 0.95*Angle_X_Gyro; //Right math, wrong variable names - to correct in future version
    116c:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <Angle_Y_Acc>
    1170:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <Angle_Y_Acc+0x1>
    1174:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Angle_Y_Acc+0x2>
    1178:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <Angle_Y_Acc+0x3>
    117c:	80 90 36 01 	lds	r8, 0x0136	; 0x800136 <Angle_X_Gyro>
    1180:	90 90 37 01 	lds	r9, 0x0137	; 0x800137 <Angle_X_Gyro+0x1>
    1184:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <Angle_X_Gyro+0x2>
    1188:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <Angle_X_Gyro+0x3>
    118c:	2d ec       	ldi	r18, 0xCD	; 205
    118e:	3c ec       	ldi	r19, 0xCC	; 204
    1190:	4c e4       	ldi	r20, 0x4C	; 76
    1192:	5d e3       	ldi	r21, 0x3D	; 61
    1194:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1198:	6b 01       	movw	r12, r22
    119a:	7c 01       	movw	r14, r24
    119c:	23 e3       	ldi	r18, 0x33	; 51
    119e:	33 e3       	ldi	r19, 0x33	; 51
    11a0:	43 e7       	ldi	r20, 0x73	; 115
    11a2:	5f e3       	ldi	r21, 0x3F	; 63
    11a4:	c5 01       	movw	r24, r10
    11a6:	b4 01       	movw	r22, r8
    11a8:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	c7 01       	movw	r24, r14
    11b2:	b6 01       	movw	r22, r12
    11b4:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    11b8:	0e 94 06 12 	call	0x240c	; 0x240c <__fixsfsi>
    11bc:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <AngleY>

	if (print == 1)
    11c0:	c1 30       	cpi	r28, 0x01	; 1
    11c2:	41 f4       	brne	.+16     	; 0x11d4 <angle_filtered+0xd0>
	{
		USART_Transmit(AngleX);
    11c4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <AngleX>
    11c8:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
		USART_Transmit(AngleY);
    11cc:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <AngleY>
    11d0:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	}
	
}
    11d4:	cf 91       	pop	r28
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	af 90       	pop	r10
    11e2:	9f 90       	pop	r9
    11e4:	8f 90       	pop	r8
    11e6:	08 95       	ret

000011e8 <main>:
volatile uint8_t ISR_USART_Receive = 0;


int main(void)
{
	DDRD = 0b00000000; //Makes PORTD as Input
    11e8:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00001111; //Internal Pull Up enabled
    11ea:	8f e0       	ldi	r24, 0x0F	; 15
    11ec:	8b b9       	out	0x0b, r24	; 11
	DDRE &= 0b10111111;
    11ee:	6e 98       	cbi	0x0d, 6	; 13

	timer_init();
    11f0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <timer_init>
	
	TWI_init();
    11f4:	0e 94 c7 01 	call	0x38e	; 0x38e <TWI_init>
	USART_Init(57600);
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	91 ee       	ldi	r25, 0xE1	; 225
    11fc:	0e 94 7f 10 	call	0x20fe	; 0x20fe <USART_Init>
	
	USART_Transmit(IMU_Init());
    1200:	0e 94 81 04 	call	0x902	; 0x902 <IMU_Init>
    1204:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	
	interrupt_init();
    1208:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <interrupt_init>
	
	sei(); //cli(); countermeasure
    120c:	78 94       	sei
	while (1)
	{
		//aux1 = 50; //for development purpose only
		if (aux1 > 25) //taking some noise into account
		{
			is_started = 1;
    120e:	d1 e0       	ldi	r29, 0x01	; 1
    1210:	cd 2f       	mov	r28, r29
	sei(); //cli(); countermeasure

	while (1)
	{
		//aux1 = 50; //for development purpose only
		if (aux1 > 25) //taking some noise into account
    1212:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <aux1>
    1216:	8a 31       	cpi	r24, 0x1A	; 26
    1218:	18 f0       	brcs	.+6      	; 0x1220 <main+0x38>
		{
			is_started = 1;
    121a:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <is_started>
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <main+0x3c>
			}else{
			is_started = 0;
    1220:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <is_started>
		}
		
		if (is_started == 1)
    1224:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <is_started>
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	99 f7       	brne	.-26     	; 0x1212 <main+0x2a>
		{
			read_acceleration(1); //refresh acc reading
    122c:	8d 2f       	mov	r24, r29
    122e:	0e 94 4f 03 	call	0x69e	; 0x69e <read_acceleration>
			read_gyroscope(); //refresh gyro reading
    1232:	0e 94 f7 03 	call	0x7ee	; 0x7ee <read_gyroscope>
			
			computed_acceleration(0);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 40 05 	call	0xa80	; 0xa80 <computed_acceleration>
			computed_gyroscope(0);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	0e 94 ca 05 	call	0xb94	; 0xb94 <computed_gyroscope>
			
			compute_angle_acc(0);
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	0e 94 42 06 	call	0xc84	; 0xc84 <compute_angle_acc>
			compute_angle_gyro(0);
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	0e 94 80 07 	call	0xf00	; 0xf00 <compute_angle_gyro>

			angle_filtered(0);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 82 08 	call	0x1104	; 0x1104 <angle_filtered>
			
			update_PIDs();
    1254:	0e 94 99 0b 	call	0x1732	; 0x1732 <update_PIDs>
			update_motors();
    1258:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <update_motors>
    125c:	da cf       	rjmp	.-76     	; 0x1212 <main+0x2a>

0000125e <PID_Pitch>:
volatile uint8_t motor3 = 0;
volatile uint8_t motor4 = 0;

uint8_t PID[3];

void PID_Pitch(){
    125e:	4f 92       	push	r4
    1260:	5f 92       	push	r5
    1262:	6f 92       	push	r6
    1264:	7f 92       	push	r7
    1266:	af 92       	push	r10
    1268:	bf 92       	push	r11
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29

	error_pitch = map_values(AngleX, 0, 90, 0, 100) - pitch;
    127a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <AngleX>
    127e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <pitch>
    1282:	34 e6       	ldi	r19, 0x64	; 100
    1284:	83 02       	muls	r24, r19
    1286:	c0 01       	movw	r24, r0
    1288:	11 24       	eor	r1, r1
    128a:	6a e5       	ldi	r22, 0x5A	; 90
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	0e 94 c5 13 	call	0x278a	; 0x278a <__divmodhi4>
    1292:	c6 2f       	mov	r28, r22
    1294:	c2 1b       	sub	r28, r18
    1296:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <error_pitch>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_pitch[0]*error_pitch;
    129a:	02 e2       	ldi	r16, 0x22	; 34
    129c:	11 e0       	ldi	r17, 0x01	; 1
    129e:	f8 01       	movw	r30, r16
    12a0:	b0 80       	ld	r11, Z
    12a2:	cb 9d       	mul	r28, r11
    12a4:	b0 2c       	mov	r11, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	b0 92 ba 01 	sts	0x01BA, r11	; 0x8001ba <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*TCNT0 - last_sample_pitch;
    12ac:	66 b5       	in	r22, 0x26	; 38
    12ae:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <system_tick_MG>
    12b2:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <system_tick_MG+0x1>
    12b6:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <system_tick_MG+0x2>
    12ba:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <system_tick_MG+0x3>
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    12c8:	2b eb       	ldi	r18, 0xBB	; 187
    12ca:	32 e9       	ldi	r19, 0x92	; 146
    12cc:	49 e8       	ldi	r20, 0x89	; 137
    12ce:	56 e3       	ldi	r21, 0x36	; 54
    12d0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    12d4:	a7 01       	movw	r20, r14
    12d6:	96 01       	movw	r18, r12
    12d8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    12dc:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <last_sample_pitch>
    12e0:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <last_sample_pitch+0x1>
    12e4:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <last_sample_pitch+0x2>
    12e8:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <last_sample_pitch+0x3>
    12ec:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    12f0:	6b 01       	movw	r12, r22
    12f2:	7c 01       	movw	r14, r24
    12f4:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <delta_time_PID>
    12f8:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <delta_time_PID+0x1>
    12fc:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <delta_time_PID+0x2>
    1300:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <delta_time_PID+0x3>


	pid_i = pid_i+(k_pitch[1]*error_pitch)*delta_time_PID;
    1304:	d0 e0       	ldi	r29, 0x00	; 0
    1306:	f8 01       	movw	r30, r16
    1308:	81 81       	ldd	r24, Z+1	; 0x01
    130a:	8c 9f       	mul	r24, r28
    130c:	b0 01       	movw	r22, r0
    130e:	8d 9f       	mul	r24, r29
    1310:	70 0d       	add	r23, r0
    1312:	11 24       	eor	r1, r1
    1314:	07 2e       	mov	r0, r23
    1316:	00 0c       	add	r0, r0
    1318:	88 0b       	sbc	r24, r24
    131a:	99 0b       	sbc	r25, r25
    131c:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1320:	a7 01       	movw	r20, r14
    1322:	96 01       	movw	r18, r12
    1324:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1328:	2b 01       	movw	r4, r22
    132a:	3c 01       	movw	r6, r24
    132c:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <pid_i>
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    133a:	9b 01       	movw	r18, r22
    133c:	ac 01       	movw	r20, r24
    133e:	c3 01       	movw	r24, r6
    1340:	b2 01       	movw	r22, r4
    1342:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1346:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    134a:	a6 2e       	mov	r10, r22
    134c:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <pid_i>


	pid_d = k_pitch[2]*((error_pitch - error_pitch_previous)/delta_time_PID);
    1350:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <error_pitch_previous>
    1354:	be 01       	movw	r22, r28
    1356:	68 1b       	sub	r22, r24
    1358:	71 09       	sbc	r23, r1
    135a:	07 2e       	mov	r0, r23
    135c:	00 0c       	add	r0, r0
    135e:	88 0b       	sbc	r24, r24
    1360:	99 0b       	sbc	r25, r25
    1362:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1366:	a7 01       	movw	r20, r14
    1368:	96 01       	movw	r18, r12
    136a:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
    136e:	6b 01       	movw	r12, r22
    1370:	7c 01       	movw	r14, r24
    1372:	f8 01       	movw	r30, r16
    1374:	62 81       	ldd	r22, Z+2	; 0x02
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1380:	9b 01       	movw	r18, r22
    1382:	ac 01       	movw	r20, r24
    1384:	c7 01       	movw	r24, r14
    1386:	b6 01       	movw	r22, r12
    1388:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    138c:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    1390:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[0] = pid_p + pid_i + pid_d;
    1394:	6a 0d       	add	r22, r10
    1396:	b6 0e       	add	r11, r22
    1398:	b0 92 b0 01 	sts	0x01B0, r11	; 0x8001b0 <PID>
	
	last_sample_pitch = system_tick_MG + 0.0000041*TCNT0;
    139c:	66 b5       	in	r22, 0x26	; 38
    139e:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <system_tick_MG>
    13a2:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <system_tick_MG+0x1>
    13a6:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <system_tick_MG+0x2>
    13aa:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <system_tick_MG+0x3>
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    13b8:	2b eb       	ldi	r18, 0xBB	; 187
    13ba:	32 e9       	ldi	r19, 0x92	; 146
    13bc:	49 e8       	ldi	r20, 0x89	; 137
    13be:	56 e3       	ldi	r21, 0x36	; 54
    13c0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    13c4:	a7 01       	movw	r20, r14
    13c6:	96 01       	movw	r18, r12
    13c8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    13cc:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <last_sample_pitch>
    13d0:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <last_sample_pitch+0x1>
    13d4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <last_sample_pitch+0x2>
    13d8:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <last_sample_pitch+0x3>

}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	7f 90       	pop	r7
    13f2:	6f 90       	pop	r6
    13f4:	5f 90       	pop	r5
    13f6:	4f 90       	pop	r4
    13f8:	08 95       	ret

000013fa <PID_Roll>:

void PID_Roll(){
    13fa:	4f 92       	push	r4
    13fc:	5f 92       	push	r5
    13fe:	6f 92       	push	r6
    1400:	7f 92       	push	r7
    1402:	af 92       	push	r10
    1404:	bf 92       	push	r11
    1406:	cf 92       	push	r12
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29

	error_roll = map_values(AngleY, 0, 90, 0, 100) - roll;
    1416:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <AngleY>
    141a:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <roll>
    141e:	34 e6       	ldi	r19, 0x64	; 100
    1420:	83 02       	muls	r24, r19
    1422:	c0 01       	movw	r24, r0
    1424:	11 24       	eor	r1, r1
    1426:	6a e5       	ldi	r22, 0x5A	; 90
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	0e 94 c5 13 	call	0x278a	; 0x278a <__divmodhi4>
    142e:	c6 2f       	mov	r28, r22
    1430:	c2 1b       	sub	r28, r18
    1432:	c0 93 bb 01 	sts	0x01BB, r28	; 0x8001bb <error_roll>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_roll[0]*error_roll;
    1436:	0f e1       	ldi	r16, 0x1F	; 31
    1438:	11 e0       	ldi	r17, 0x01	; 1
    143a:	f8 01       	movw	r30, r16
    143c:	b0 80       	ld	r11, Z
    143e:	cb 9d       	mul	r28, r11
    1440:	b0 2c       	mov	r11, r0
    1442:	11 24       	eor	r1, r1
    1444:	b0 92 ba 01 	sts	0x01BA, r11	; 0x8001ba <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*TCNT0 - last_sample_roll;
    1448:	66 b5       	in	r22, 0x26	; 38
    144a:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <system_tick_MG>
    144e:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1452:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <system_tick_MG+0x2>
    1456:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <system_tick_MG+0x3>
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1464:	2b eb       	ldi	r18, 0xBB	; 187
    1466:	32 e9       	ldi	r19, 0x92	; 146
    1468:	49 e8       	ldi	r20, 0x89	; 137
    146a:	56 e3       	ldi	r21, 0x36	; 54
    146c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1470:	a7 01       	movw	r20, r14
    1472:	96 01       	movw	r18, r12
    1474:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1478:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <last_sample_roll>
    147c:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <last_sample_roll+0x1>
    1480:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <last_sample_roll+0x2>
    1484:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <last_sample_roll+0x3>
    1488:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    148c:	6b 01       	movw	r12, r22
    148e:	7c 01       	movw	r14, r24
    1490:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <delta_time_PID>
    1494:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <delta_time_PID+0x1>
    1498:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <delta_time_PID+0x2>
    149c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <delta_time_PID+0x3>


	pid_i = pid_i+(k_roll[1]*error_roll)*delta_time_PID;
    14a0:	d0 e0       	ldi	r29, 0x00	; 0
    14a2:	f8 01       	movw	r30, r16
    14a4:	81 81       	ldd	r24, Z+1	; 0x01
    14a6:	8c 9f       	mul	r24, r28
    14a8:	b0 01       	movw	r22, r0
    14aa:	8d 9f       	mul	r24, r29
    14ac:	70 0d       	add	r23, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	07 2e       	mov	r0, r23
    14b2:	00 0c       	add	r0, r0
    14b4:	88 0b       	sbc	r24, r24
    14b6:	99 0b       	sbc	r25, r25
    14b8:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    14bc:	a7 01       	movw	r20, r14
    14be:	96 01       	movw	r18, r12
    14c0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    14c4:	2b 01       	movw	r4, r22
    14c6:	3c 01       	movw	r6, r24
    14c8:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <pid_i>
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	c3 01       	movw	r24, r6
    14dc:	b2 01       	movw	r22, r4
    14de:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    14e2:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    14e6:	a6 2e       	mov	r10, r22
    14e8:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <pid_i>


	pid_d = k_roll[2]*((error_roll - error_roll_previous)/delta_time_PID);
    14ec:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <error_roll_previous>
    14f0:	be 01       	movw	r22, r28
    14f2:	68 1b       	sub	r22, r24
    14f4:	71 09       	sbc	r23, r1
    14f6:	07 2e       	mov	r0, r23
    14f8:	00 0c       	add	r0, r0
    14fa:	88 0b       	sbc	r24, r24
    14fc:	99 0b       	sbc	r25, r25
    14fe:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1502:	a7 01       	movw	r20, r14
    1504:	96 01       	movw	r18, r12
    1506:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
    150a:	6b 01       	movw	r12, r22
    150c:	7c 01       	movw	r14, r24
    150e:	f8 01       	movw	r30, r16
    1510:	62 81       	ldd	r22, Z+2	; 0x02
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    151c:	9b 01       	movw	r18, r22
    151e:	ac 01       	movw	r20, r24
    1520:	c7 01       	movw	r24, r14
    1522:	b6 01       	movw	r22, r12
    1524:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1528:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    152c:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[1] = pid_p + pid_i + pid_d;
    1530:	6a 0d       	add	r22, r10
    1532:	b6 0e       	add	r11, r22
    1534:	b0 92 b1 01 	sts	0x01B1, r11	; 0x8001b1 <PID+0x1>
	
	last_sample_roll = system_tick_MG + 0.0000041*TCNT0;
    1538:	66 b5       	in	r22, 0x26	; 38
    153a:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <system_tick_MG>
    153e:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1542:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <system_tick_MG+0x2>
    1546:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <system_tick_MG+0x3>
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1554:	2b eb       	ldi	r18, 0xBB	; 187
    1556:	32 e9       	ldi	r19, 0x92	; 146
    1558:	49 e8       	ldi	r20, 0x89	; 137
    155a:	56 e3       	ldi	r21, 0x36	; 54
    155c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1560:	a7 01       	movw	r20, r14
    1562:	96 01       	movw	r18, r12
    1564:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1568:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <last_sample_roll>
    156c:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <last_sample_roll+0x1>
    1570:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <last_sample_roll+0x2>
    1574:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <last_sample_roll+0x3>

}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	bf 90       	pop	r11
    158a:	af 90       	pop	r10
    158c:	7f 90       	pop	r7
    158e:	6f 90       	pop	r6
    1590:	5f 90       	pop	r5
    1592:	4f 90       	pop	r4
    1594:	08 95       	ret

00001596 <PID_Yaw>:

void PID_Yaw(){
    1596:	4f 92       	push	r4
    1598:	5f 92       	push	r5
    159a:	6f 92       	push	r6
    159c:	7f 92       	push	r7
    159e:	af 92       	push	r10
    15a0:	bf 92       	push	r11
    15a2:	cf 92       	push	r12
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29

	error_yaw = map_values(AngleX, 0, 90, 0, 100) - yaw;
    15b2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <AngleX>
    15b6:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <yaw>
    15ba:	34 e6       	ldi	r19, 0x64	; 100
    15bc:	83 02       	muls	r24, r19
    15be:	c0 01       	movw	r24, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	6a e5       	ldi	r22, 0x5A	; 90
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	0e 94 c5 13 	call	0x278a	; 0x278a <__divmodhi4>
    15ca:	c6 2f       	mov	r28, r22
    15cc:	c2 1b       	sub	r28, r18
    15ce:	c0 93 b8 01 	sts	0x01B8, r28	; 0x8001b8 <error_yaw>

	/*Next the proportional value of the PID is just a proportional constant
	*multiplied by the error*/

	pid_p = k_yaw[0]*error_yaw;
    15d2:	0f e4       	ldi	r16, 0x4F	; 79
    15d4:	11 e0       	ldi	r17, 0x01	; 1
    15d6:	f8 01       	movw	r30, r16
    15d8:	b0 80       	ld	r11, Z
    15da:	cb 9d       	mul	r28, r11
    15dc:	b0 2c       	mov	r11, r0
    15de:	11 24       	eor	r1, r1
    15e0:	b0 92 ba 01 	sts	0x01BA, r11	; 0x8001ba <pid_p>
	
	delta_time_PID = system_tick_MG + 0.0000041*TCNT0 - last_sample_yaw;
    15e4:	66 b5       	in	r22, 0x26	; 38
    15e6:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <system_tick_MG>
    15ea:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <system_tick_MG+0x1>
    15ee:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <system_tick_MG+0x2>
    15f2:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <system_tick_MG+0x3>
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1600:	2b eb       	ldi	r18, 0xBB	; 187
    1602:	32 e9       	ldi	r19, 0x92	; 146
    1604:	49 e8       	ldi	r20, 0x89	; 137
    1606:	56 e3       	ldi	r21, 0x36	; 54
    1608:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    160c:	a7 01       	movw	r20, r14
    160e:	96 01       	movw	r18, r12
    1610:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1614:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <last_sample_yaw>
    1618:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <last_sample_yaw+0x1>
    161c:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <last_sample_yaw+0x2>
    1620:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <last_sample_yaw+0x3>
    1624:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    1628:	6b 01       	movw	r12, r22
    162a:	7c 01       	movw	r14, r24
    162c:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <delta_time_PID>
    1630:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <delta_time_PID+0x1>
    1634:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <delta_time_PID+0x2>
    1638:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <delta_time_PID+0x3>


	pid_i = pid_i+(k_yaw[1]*error_yaw)*delta_time_PID;
    163c:	d0 e0       	ldi	r29, 0x00	; 0
    163e:	f8 01       	movw	r30, r16
    1640:	81 81       	ldd	r24, Z+1	; 0x01
    1642:	8c 9f       	mul	r24, r28
    1644:	b0 01       	movw	r22, r0
    1646:	8d 9f       	mul	r24, r29
    1648:	70 0d       	add	r23, r0
    164a:	11 24       	eor	r1, r1
    164c:	07 2e       	mov	r0, r23
    164e:	00 0c       	add	r0, r0
    1650:	88 0b       	sbc	r24, r24
    1652:	99 0b       	sbc	r25, r25
    1654:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1658:	a7 01       	movw	r20, r14
    165a:	96 01       	movw	r18, r12
    165c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1660:	2b 01       	movw	r4, r22
    1662:	3c 01       	movw	r6, r24
    1664:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <pid_i>
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	c3 01       	movw	r24, r6
    1678:	b2 01       	movw	r22, r4
    167a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    167e:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    1682:	a6 2e       	mov	r10, r22
    1684:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <pid_i>


	pid_d = k_yaw[2]*((error_yaw - error_yaw_previous)/delta_time_PID);
    1688:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <error_yaw_previous>
    168c:	be 01       	movw	r22, r28
    168e:	68 1b       	sub	r22, r24
    1690:	71 09       	sbc	r23, r1
    1692:	07 2e       	mov	r0, r23
    1694:	00 0c       	add	r0, r0
    1696:	88 0b       	sbc	r24, r24
    1698:	99 0b       	sbc	r25, r25
    169a:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    169e:	a7 01       	movw	r20, r14
    16a0:	96 01       	movw	r18, r12
    16a2:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
    16a6:	6b 01       	movw	r12, r22
    16a8:	7c 01       	movw	r14, r24
    16aa:	f8 01       	movw	r30, r16
    16ac:	62 81       	ldd	r22, Z+2	; 0x02
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	c7 01       	movw	r24, r14
    16be:	b6 01       	movw	r22, r12
    16c0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    16c4:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    16c8:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <pid_d>

	/*The final PID values is the sum of each of this 3 parts*/
	PID[2] = pid_p + pid_i + pid_d;
    16cc:	6a 0d       	add	r22, r10
    16ce:	b6 0e       	add	r11, r22
    16d0:	b0 92 b2 01 	sts	0x01B2, r11	; 0x8001b2 <PID+0x2>
	
	last_sample_yaw = system_tick_MG + 0.0000041*TCNT0;
    16d4:	66 b5       	in	r22, 0x26	; 38
    16d6:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <system_tick_MG>
    16da:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <system_tick_MG+0x1>
    16de:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <system_tick_MG+0x2>
    16e2:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <system_tick_MG+0x3>
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    16f0:	2b eb       	ldi	r18, 0xBB	; 187
    16f2:	32 e9       	ldi	r19, 0x92	; 146
    16f4:	49 e8       	ldi	r20, 0x89	; 137
    16f6:	56 e3       	ldi	r21, 0x36	; 54
    16f8:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    16fc:	a7 01       	movw	r20, r14
    16fe:	96 01       	movw	r18, r12
    1700:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1704:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <last_sample_yaw>
    1708:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <last_sample_yaw+0x1>
    170c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <last_sample_yaw+0x2>
    1710:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <last_sample_yaw+0x3>

}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	7f 90       	pop	r7
    172a:	6f 90       	pop	r6
    172c:	5f 90       	pop	r5
    172e:	4f 90       	pop	r4
    1730:	08 95       	ret

00001732 <update_PIDs>:

void update_PIDs(){
	if (throttle > 5)
    1732:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <throttle>
    1736:	86 30       	cpi	r24, 0x06	; 6
    1738:	50 f1       	brcs	.+84     	; 0x178e <update_PIDs+0x5c>
	{
		PID_Pitch();
    173a:	0e 94 2f 09 	call	0x125e	; 0x125e <PID_Pitch>
		PID_Roll();
    173e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <PID_Roll>
		PID_Yaw();
    1742:	0e 94 cb 0a 	call	0x1596	; 0x1596 <PID_Yaw>
		
		motor1 = throttle + PID[0] - PID[1] + PID[2];
    1746:	e0 eb       	ldi	r30, 0xB0	; 176
    1748:	f1 e0       	ldi	r31, 0x01	; 1
    174a:	30 81       	ld	r19, Z
    174c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <throttle>
    1750:	21 81       	ldd	r18, Z+1	; 0x01
    1752:	92 81       	ldd	r25, Z+2	; 0x02
    1754:	83 0f       	add	r24, r19
    1756:	89 0f       	add	r24, r25
    1758:	82 1b       	sub	r24, r18
    175a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <motor1>
		motor2 = throttle + PID[0] + PID[1] - PID[2];
    175e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <throttle>
    1762:	43 2f       	mov	r20, r19
    1764:	42 0f       	add	r20, r18
    1766:	84 0f       	add	r24, r20
    1768:	89 1b       	sub	r24, r25
    176a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <motor2>
		motor3 = throttle - PID[0] + PID[1] + PID[2];
    176e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <throttle>
    1772:	42 2f       	mov	r20, r18
    1774:	49 0f       	add	r20, r25
    1776:	84 0f       	add	r24, r20
    1778:	83 1b       	sub	r24, r19
    177a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <motor3>
		motor4 = throttle - PID[0] - PID[1] - PID[2];
    177e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <throttle>
    1782:	83 1b       	sub	r24, r19
    1784:	82 1b       	sub	r24, r18
    1786:	89 1b       	sub	r24, r25
    1788:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <motor4>
    178c:	08 95       	ret
		}else{
		motor1 = 5;
    178e:	85 e0       	ldi	r24, 0x05	; 5
    1790:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <motor1>
		motor2 = 5;
    1794:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <motor2>
		motor3 = 5;
    1798:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <motor3>
		motor4 = 5;
    179c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <motor4>
    17a0:	08 95       	ret

000017a2 <update_motors>:
	}
}

void update_motors(){
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    17a6:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <motor3>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    17aa:	45 36       	cpi	r20, 0x65	; 101
    17ac:	1c f4       	brge	.+6      	; 0x17b4 <update_motors+0x12>
	{
		return max;
		}else{
		if(value < min){
    17ae:	45 30       	cpi	r20, 0x05	; 5
    17b0:	24 f4       	brge	.+8      	; 0x17ba <update_motors+0x18>
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <update_motors+0x16>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    17b4:	44 e6       	ldi	r20, 0x64	; 100
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <update_motors+0x18>
		}else{
		if(value < min){
			return min;
    17b8:	45 e0       	ldi	r20, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    17ba:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <motor1>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    17be:	65 36       	cpi	r22, 0x65	; 101
    17c0:	1c f4       	brge	.+6      	; 0x17c8 <update_motors+0x26>
	{
		return max;
		}else{
		if(value < min){
    17c2:	65 30       	cpi	r22, 0x05	; 5
    17c4:	24 f4       	brge	.+8      	; 0x17ce <update_motors+0x2c>
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <update_motors+0x2a>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    17c8:	64 e6       	ldi	r22, 0x64	; 100
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <update_motors+0x2c>
		}else{
		if(value < min){
			return min;
    17cc:	65 e0       	ldi	r22, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    17ce:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <motor2>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    17d2:	85 36       	cpi	r24, 0x65	; 101
    17d4:	1c f4       	brge	.+6      	; 0x17dc <update_motors+0x3a>
	{
		return max;
		}else{
		if(value < min){
    17d6:	85 30       	cpi	r24, 0x05	; 5
    17d8:	24 f4       	brge	.+8      	; 0x17e2 <update_motors+0x40>
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <update_motors+0x3e>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    17dc:	84 e6       	ldi	r24, 0x64	; 100
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <update_motors+0x40>
		}else{
		if(value < min){
			return min;
    17e0:	85 e0       	ldi	r24, 0x05	; 5
	}
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
    17e2:	01 e0       	ldi	r16, 0x01	; 1
    17e4:	10 e0       	ldi	r17, 0x00	; 0
    17e6:	24 ef       	ldi	r18, 0xF4	; 244
    17e8:	31 e0       	ldi	r19, 0x01	; 1
    17ea:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <timer1_16bit_PWM_ABC>
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
    17ee:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <motor4>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
    17f2:	85 36       	cpi	r24, 0x65	; 101
    17f4:	1c f4       	brge	.+6      	; 0x17fc <update_motors+0x5a>
	{
		return max;
		}else{
		if(value < min){
    17f6:	85 30       	cpi	r24, 0x05	; 5
    17f8:	24 f4       	brge	.+8      	; 0x1802 <update_motors+0x60>
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <update_motors+0x5e>
}

int8_t limit_bound(int8_t value,int8_t min,int8_t max){
	if (value > max)
	{
		return max;
    17fc:	84 e6       	ldi	r24, 0x64	; 100
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <update_motors+0x60>
		}else{
		if(value < min){
			return min;
    1800:	85 e0       	ldi	r24, 0x05	; 5
}

void update_motors(){
	
	timer1_16bit_PWM_ABC(limit_bound(motor2, 5, 100), limit_bound(motor1, 5, 100), limit_bound(motor3, 5, 100), 500, 1);
	timer3_16bit_PWM_A(limit_bound(motor4, 5, 100), 500, 1);
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	64 ef       	ldi	r22, 0xF4	; 244
    1808:	71 e0       	ldi	r23, 0x01	; 1
    180a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <timer3_16bit_PWM_A>
}
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	08 95       	ret

00001814 <Int_6_En>:
	PCMSK0 = reg;
	PCIFR = 1;
}

void Pin_Change_Disen(){
	PCICR = (0 << PCIE0);
    1814:	8f b7       	in	r24, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	e6 9a       	sbi	0x1c, 6	; 28
    181a:	ee 9a       	sbi	0x1d, 6	; 29
    181c:	8f bf       	out	0x3f, r24	; 63
    181e:	08 95       	ret

00001820 <Interrupt_Init_Rising_INT6>:
    1820:	cf 93       	push	r28
    1822:	cf b7       	in	r28, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	8c b3       	in	r24, 0x1c	; 28
    1828:	8c bb       	out	0x1c, r24	; 28
    182a:	ea e6       	ldi	r30, 0x6A	; 106
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 63       	ori	r24, 0x30	; 48
    1832:	80 83       	st	Z, r24
    1834:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Int_6_En>
    1838:	cf bf       	out	0x3f, r28	; 63
    183a:	cf 91       	pop	r28
    183c:	08 95       	ret

0000183e <Interrupt_Init_Falling_INT6>:
    183e:	cf 93       	push	r28
    1840:	cf b7       	in	r28, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	e6 9a       	sbi	0x1c, 6	; 28
    1846:	ea e6       	ldi	r30, 0x6A	; 106
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8f 7e       	andi	r24, 0xEF	; 239
    184e:	80 83       	st	Z, r24
    1850:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Int_6_En>
    1854:	cf bf       	out	0x3f, r28	; 63
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <Pin_Change_En>:
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1860:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1864:	9b bb       	out	0x1b, r25	; 27
    1866:	08 95       	ret

00001868 <__vector_7>:
}




ISR(INT6_vect){
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	4f 92       	push	r4
    1874:	5f 92       	push	r5
    1876:	6f 92       	push	r6
    1878:	7f 92       	push	r7
    187a:	8f 92       	push	r8
    187c:	9f 92       	push	r9
    187e:	af 92       	push	r10
    1880:	bf 92       	push	r11
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	2f 93       	push	r18
    188c:	3f 93       	push	r19
    188e:	4f 93       	push	r20
    1890:	5f 93       	push	r21
    1892:	6f 93       	push	r22
    1894:	7f 93       	push	r23
    1896:	8f 93       	push	r24
    1898:	9f 93       	push	r25
    189a:	af 93       	push	r26
    189c:	bf 93       	push	r27
    189e:	ef 93       	push	r30
    18a0:	ff 93       	push	r31
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <__vector_7+0x40>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <__vector_7+0x42>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
	if (flag_rx  == 0)
    18ae:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <flag_rx>
    18b2:	81 11       	cpse	r24, r1
    18b4:	52 c0       	rjmp	.+164    	; 0x195a <__vector_7+0xf2>
	{
		
		period = (system_tick_MG + 0.000004*TCNT0 - int_period);
    18b6:	66 b5       	in	r22, 0x26	; 38
    18b8:	80 90 62 01 	lds	r8, 0x0162	; 0x800162 <system_tick_MG>
    18bc:	90 90 63 01 	lds	r9, 0x0163	; 0x800163 <system_tick_MG+0x1>
    18c0:	a0 90 64 01 	lds	r10, 0x0164	; 0x800164 <system_tick_MG+0x2>
    18c4:	b0 90 65 01 	lds	r11, 0x0165	; 0x800165 <system_tick_MG+0x3>
    18c8:	c0 90 59 01 	lds	r12, 0x0159	; 0x800159 <int_period>
    18cc:	d0 90 5a 01 	lds	r13, 0x015A	; 0x80015a <int_period+0x1>
    18d0:	e0 90 5b 01 	lds	r14, 0x015B	; 0x80015b <int_period+0x2>
    18d4:	f0 90 5c 01 	lds	r15, 0x015C	; 0x80015c <int_period+0x3>
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    18e2:	2d eb       	ldi	r18, 0xBD	; 189
    18e4:	37 e3       	ldi	r19, 0x37	; 55
    18e6:	46 e8       	ldi	r20, 0x86	; 134
    18e8:	56 e3       	ldi	r21, 0x36	; 54
    18ea:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    18ee:	a5 01       	movw	r20, r10
    18f0:	94 01       	movw	r18, r8
    18f2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    18f6:	a7 01       	movw	r20, r14
    18f8:	96 01       	movw	r18, r12
    18fa:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    18fe:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <period>
    1902:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <period+0x1>
    1906:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <period+0x2>
    190a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <period+0x3>

		int_period = system_tick_MG + 0.000004*TCNT0; //To count the period of the wave in ms
    190e:	66 b5       	in	r22, 0x26	; 38
    1910:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <system_tick_MG>
    1914:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1918:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <system_tick_MG+0x2>
    191c:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <system_tick_MG+0x3>
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    192a:	2d eb       	ldi	r18, 0xBD	; 189
    192c:	37 e3       	ldi	r19, 0x37	; 55
    192e:	46 e8       	ldi	r20, 0x86	; 134
    1930:	56 e3       	ldi	r21, 0x36	; 54
    1932:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1936:	a7 01       	movw	r20, r14
    1938:	96 01       	movw	r18, r12
    193a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    193e:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <int_period>
    1942:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <int_period+0x1>
    1946:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <int_period+0x2>
    194a:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <int_period+0x3>
		
		Interrupt_Init_Falling_INT6();
    194e:	0e 94 1f 0c 	call	0x183e	; 0x183e <Interrupt_Init_Falling_INT6>

		flag_rx = 1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <flag_rx>
    1958:	48 c0       	rjmp	.+144    	; 0x19ea <__vector_7+0x182>

		}else{
		
		throttle = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    195a:	80 90 62 01 	lds	r8, 0x0162	; 0x800162 <system_tick_MG>
    195e:	90 90 63 01 	lds	r9, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1962:	a0 90 64 01 	lds	r10, 0x0164	; 0x800164 <system_tick_MG+0x2>
    1966:	b0 90 65 01 	lds	r11, 0x0165	; 0x800165 <system_tick_MG+0x3>
    196a:	40 90 59 01 	lds	r4, 0x0159	; 0x800159 <int_period>
    196e:	50 90 5a 01 	lds	r5, 0x015A	; 0x80015a <int_period+0x1>
    1972:	60 90 5b 01 	lds	r6, 0x015B	; 0x80015b <int_period+0x2>
    1976:	70 90 5c 01 	lds	r7, 0x015C	; 0x80015c <int_period+0x3>
    197a:	66 b5       	in	r22, 0x26	; 38
    197c:	c0 90 55 01 	lds	r12, 0x0155	; 0x800155 <period>
    1980:	d0 90 56 01 	lds	r13, 0x0156	; 0x800156 <period+0x1>
    1984:	e0 90 57 01 	lds	r14, 0x0157	; 0x800157 <period+0x2>
    1988:	f0 90 58 01 	lds	r15, 0x0158	; 0x800158 <period+0x3>
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1996:	2d eb       	ldi	r18, 0xBD	; 189
    1998:	37 e3       	ldi	r19, 0x37	; 55
    199a:	46 e8       	ldi	r20, 0x86	; 134
    199c:	56 e3       	ldi	r21, 0x36	; 54
    199e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    19a2:	69 83       	std	Y+1, r22	; 0x01
    19a4:	7a 83       	std	Y+2, r23	; 0x02
    19a6:	8b 83       	std	Y+3, r24	; 0x03
    19a8:	9c 83       	std	Y+4, r25	; 0x04
    19aa:	a3 01       	movw	r20, r6
    19ac:	92 01       	movw	r18, r4
    19ae:	c5 01       	movw	r24, r10
    19b0:	b4 01       	movw	r22, r8
    19b2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	69 81       	ldd	r22, Y+1	; 0x01
    19bc:	7a 81       	ldd	r23, Y+2	; 0x02
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	48 ec       	ldi	r20, 0xC8	; 200
    19cc:	52 e4       	ldi	r21, 0x42	; 66
    19ce:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    19d2:	a7 01       	movw	r20, r14
    19d4:	96 01       	movw	r18, r12
    19d6:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
    19da:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    19de:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <throttle>
		
		Interrupt_Init_Rising_INT6();
    19e2:	0e 94 10 0c 	call	0x1820	; 0x1820 <Interrupt_Init_Rising_INT6>

		flag_rx = 0;
    19e6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <flag_rx>
	}

}
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	ff 91       	pop	r31
    19f8:	ef 91       	pop	r30
    19fa:	bf 91       	pop	r27
    19fc:	af 91       	pop	r26
    19fe:	9f 91       	pop	r25
    1a00:	8f 91       	pop	r24
    1a02:	7f 91       	pop	r23
    1a04:	6f 91       	pop	r22
    1a06:	5f 91       	pop	r21
    1a08:	4f 91       	pop	r20
    1a0a:	3f 91       	pop	r19
    1a0c:	2f 91       	pop	r18
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	bf 90       	pop	r11
    1a18:	af 90       	pop	r10
    1a1a:	9f 90       	pop	r9
    1a1c:	8f 90       	pop	r8
    1a1e:	7f 90       	pop	r7
    1a20:	6f 90       	pop	r6
    1a22:	5f 90       	pop	r5
    1a24:	4f 90       	pop	r4
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f 90       	pop	r0
    1a2c:	1f 90       	pop	r1
    1a2e:	18 95       	reti

00001a30 <__vector_9>:

ISR(PCINT0_vect){
    1a30:	1f 92       	push	r1
    1a32:	0f 92       	push	r0
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	0f 92       	push	r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	4f 92       	push	r4
    1a3c:	5f 92       	push	r5
    1a3e:	6f 92       	push	r6
    1a40:	7f 92       	push	r7
    1a42:	8f 92       	push	r8
    1a44:	9f 92       	push	r9
    1a46:	af 92       	push	r10
    1a48:	bf 92       	push	r11
    1a4a:	cf 92       	push	r12
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <__vector_9+0x40>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <__vector_9+0x42>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
	//check the ports, store before value, confront with actual
	//store new value
	
	uint8_t changedbits;
	uint8_t intreading = PINB;
    1a76:	93 b1       	in	r25, 0x03	; 3
	changedbits = intreading ^ portbhistory;
    1a78:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <portbhistory>
	portbhistory = intreading;
    1a7c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <portbhistory>
	if (flag_rx == 1)
    1a80:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <flag_rx>
	{
		
	}
	

	switch(changedbits){
    1a84:	89 27       	eor	r24, r25
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__vector_9+0x5c>
    1a8a:	55 c0       	rjmp	.+170    	; 0x1b36 <__vector_9+0x106>
    1a8c:	18 f4       	brcc	.+6      	; 0x1a94 <__vector_9+0x64>
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	41 f0       	breq	.+16     	; 0x1aa2 <__vector_9+0x72>
    1a92:	2e c1       	rjmp	.+604    	; 0x1cf0 <__vector_9+0x2c0>
    1a94:	88 30       	cpi	r24, 0x08	; 8
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <__vector_9+0x6a>
    1a98:	98 c0       	rjmp	.+304    	; 0x1bca <__vector_9+0x19a>
    1a9a:	80 31       	cpi	r24, 0x10	; 16
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <__vector_9+0x70>
    1a9e:	df c0       	rjmp	.+446    	; 0x1c5e <__vector_9+0x22e>
    1aa0:	27 c1       	rjmp	.+590    	; 0x1cf0 <__vector_9+0x2c0>
		case 1: //pcint0 changed
		break;

		case 2: //pcint1 changed
		//SCK - Yaw
		if (flag_rx == 1)
    1aa2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <flag_rx>
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <__vector_9+0x7c>
    1aaa:	22 c1       	rjmp	.+580    	; 0x1cf0 <__vector_9+0x2c0>
		{
			yaw = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1aac:	80 90 62 01 	lds	r8, 0x0162	; 0x800162 <system_tick_MG>
    1ab0:	90 90 63 01 	lds	r9, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1ab4:	a0 90 64 01 	lds	r10, 0x0164	; 0x800164 <system_tick_MG+0x2>
    1ab8:	b0 90 65 01 	lds	r11, 0x0165	; 0x800165 <system_tick_MG+0x3>
    1abc:	40 90 59 01 	lds	r4, 0x0159	; 0x800159 <int_period>
    1ac0:	50 90 5a 01 	lds	r5, 0x015A	; 0x80015a <int_period+0x1>
    1ac4:	60 90 5b 01 	lds	r6, 0x015B	; 0x80015b <int_period+0x2>
    1ac8:	70 90 5c 01 	lds	r7, 0x015C	; 0x80015c <int_period+0x3>
    1acc:	66 b5       	in	r22, 0x26	; 38
    1ace:	c0 90 55 01 	lds	r12, 0x0155	; 0x800155 <period>
    1ad2:	d0 90 56 01 	lds	r13, 0x0156	; 0x800156 <period+0x1>
    1ad6:	e0 90 57 01 	lds	r14, 0x0157	; 0x800157 <period+0x2>
    1ada:	f0 90 58 01 	lds	r15, 0x0158	; 0x800158 <period+0x3>
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1ae8:	2d eb       	ldi	r18, 0xBD	; 189
    1aea:	37 e3       	ldi	r19, 0x37	; 55
    1aec:	46 e8       	ldi	r20, 0x86	; 134
    1aee:	56 e3       	ldi	r21, 0x36	; 54
    1af0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1af4:	69 83       	std	Y+1, r22	; 0x01
    1af6:	7a 83       	std	Y+2, r23	; 0x02
    1af8:	8b 83       	std	Y+3, r24	; 0x03
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	a3 01       	movw	r20, r6
    1afe:	92 01       	movw	r18, r4
    1b00:	c5 01       	movw	r24, r10
    1b02:	b4 01       	movw	r22, r8
    1b04:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    1b08:	9b 01       	movw	r18, r22
    1b0a:	ac 01       	movw	r20, r24
    1b0c:	69 81       	ldd	r22, Y+1	; 0x01
    1b0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	48 ec       	ldi	r20, 0xC8	; 200
    1b1e:	52 e4       	ldi	r21, 0x42	; 66
    1b20:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1b24:	a7 01       	movw	r20, r14
    1b26:	96 01       	movw	r18, r12
    1b28:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
    1b2c:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    1b30:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <yaw>
    1b34:	dd c0       	rjmp	.+442    	; 0x1cf0 <__vector_9+0x2c0>
		}
		break;

		case 4: //pcint2 changed
		//MOSI - Roll
		if (flag_rx == 1)
    1b36:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <flag_rx>
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <__vector_9+0x110>
    1b3e:	d8 c0       	rjmp	.+432    	; 0x1cf0 <__vector_9+0x2c0>
		{
			roll = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1b40:	80 90 62 01 	lds	r8, 0x0162	; 0x800162 <system_tick_MG>
    1b44:	90 90 63 01 	lds	r9, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1b48:	a0 90 64 01 	lds	r10, 0x0164	; 0x800164 <system_tick_MG+0x2>
    1b4c:	b0 90 65 01 	lds	r11, 0x0165	; 0x800165 <system_tick_MG+0x3>
    1b50:	40 90 59 01 	lds	r4, 0x0159	; 0x800159 <int_period>
    1b54:	50 90 5a 01 	lds	r5, 0x015A	; 0x80015a <int_period+0x1>
    1b58:	60 90 5b 01 	lds	r6, 0x015B	; 0x80015b <int_period+0x2>
    1b5c:	70 90 5c 01 	lds	r7, 0x015C	; 0x80015c <int_period+0x3>
    1b60:	66 b5       	in	r22, 0x26	; 38
    1b62:	c0 90 55 01 	lds	r12, 0x0155	; 0x800155 <period>
    1b66:	d0 90 56 01 	lds	r13, 0x0156	; 0x800156 <period+0x1>
    1b6a:	e0 90 57 01 	lds	r14, 0x0157	; 0x800157 <period+0x2>
    1b6e:	f0 90 58 01 	lds	r15, 0x0158	; 0x800158 <period+0x3>
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1b7c:	2d eb       	ldi	r18, 0xBD	; 189
    1b7e:	37 e3       	ldi	r19, 0x37	; 55
    1b80:	46 e8       	ldi	r20, 0x86	; 134
    1b82:	56 e3       	ldi	r21, 0x36	; 54
    1b84:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1b88:	69 83       	std	Y+1, r22	; 0x01
    1b8a:	7a 83       	std	Y+2, r23	; 0x02
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	a3 01       	movw	r20, r6
    1b92:	92 01       	movw	r18, r4
    1b94:	c5 01       	movw	r24, r10
    1b96:	b4 01       	movw	r22, r8
    1b98:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    1b9c:	9b 01       	movw	r18, r22
    1b9e:	ac 01       	movw	r20, r24
    1ba0:	69 81       	ldd	r22, Y+1	; 0x01
    1ba2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	48 ec       	ldi	r20, 0xC8	; 200
    1bb2:	52 e4       	ldi	r21, 0x42	; 66
    1bb4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1bb8:	a7 01       	movw	r20, r14
    1bba:	96 01       	movw	r18, r12
    1bbc:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
    1bc0:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    1bc4:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <roll>
    1bc8:	93 c0       	rjmp	.+294    	; 0x1cf0 <__vector_9+0x2c0>
		}
		break;

		case 8:  //pcint3 changed
		//MISO - Pitch
		if (flag_rx == 1)
    1bca:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <flag_rx>
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <__vector_9+0x1a4>
    1bd2:	8e c0       	rjmp	.+284    	; 0x1cf0 <__vector_9+0x2c0>
		{
			pitch = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1bd4:	80 90 62 01 	lds	r8, 0x0162	; 0x800162 <system_tick_MG>
    1bd8:	90 90 63 01 	lds	r9, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1bdc:	a0 90 64 01 	lds	r10, 0x0164	; 0x800164 <system_tick_MG+0x2>
    1be0:	b0 90 65 01 	lds	r11, 0x0165	; 0x800165 <system_tick_MG+0x3>
    1be4:	40 90 59 01 	lds	r4, 0x0159	; 0x800159 <int_period>
    1be8:	50 90 5a 01 	lds	r5, 0x015A	; 0x80015a <int_period+0x1>
    1bec:	60 90 5b 01 	lds	r6, 0x015B	; 0x80015b <int_period+0x2>
    1bf0:	70 90 5c 01 	lds	r7, 0x015C	; 0x80015c <int_period+0x3>
    1bf4:	66 b5       	in	r22, 0x26	; 38
    1bf6:	c0 90 55 01 	lds	r12, 0x0155	; 0x800155 <period>
    1bfa:	d0 90 56 01 	lds	r13, 0x0156	; 0x800156 <period+0x1>
    1bfe:	e0 90 57 01 	lds	r14, 0x0157	; 0x800157 <period+0x2>
    1c02:	f0 90 58 01 	lds	r15, 0x0158	; 0x800158 <period+0x3>
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1c10:	2d eb       	ldi	r18, 0xBD	; 189
    1c12:	37 e3       	ldi	r19, 0x37	; 55
    1c14:	46 e8       	ldi	r20, 0x86	; 134
    1c16:	56 e3       	ldi	r21, 0x36	; 54
    1c18:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1c1c:	69 83       	std	Y+1, r22	; 0x01
    1c1e:	7a 83       	std	Y+2, r23	; 0x02
    1c20:	8b 83       	std	Y+3, r24	; 0x03
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	a3 01       	movw	r20, r6
    1c26:	92 01       	movw	r18, r4
    1c28:	c5 01       	movw	r24, r10
    1c2a:	b4 01       	movw	r22, r8
    1c2c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    1c30:	9b 01       	movw	r18, r22
    1c32:	ac 01       	movw	r20, r24
    1c34:	69 81       	ldd	r22, Y+1	; 0x01
    1c36:	7a 81       	ldd	r23, Y+2	; 0x02
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	48 ec       	ldi	r20, 0xC8	; 200
    1c46:	52 e4       	ldi	r21, 0x42	; 66
    1c48:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1c4c:	a7 01       	movw	r20, r14
    1c4e:	96 01       	movw	r18, r12
    1c50:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
    1c54:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    1c58:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <pitch>
    1c5c:	49 c0       	rjmp	.+146    	; 0x1cf0 <__vector_9+0x2c0>
		}
		break;

		case 16: //pcint4 changed
		//PB4: AUX1
		if (flag_rx == 1)
    1c5e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <flag_rx>
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <__vector_9+0x238>
    1c66:	44 c0       	rjmp	.+136    	; 0x1cf0 <__vector_9+0x2c0>
		{
			aux1 = ((system_tick_MG  - int_period + 0.000004*TCNT0)*100)/period;
    1c68:	80 90 62 01 	lds	r8, 0x0162	; 0x800162 <system_tick_MG>
    1c6c:	90 90 63 01 	lds	r9, 0x0163	; 0x800163 <system_tick_MG+0x1>
    1c70:	a0 90 64 01 	lds	r10, 0x0164	; 0x800164 <system_tick_MG+0x2>
    1c74:	b0 90 65 01 	lds	r11, 0x0165	; 0x800165 <system_tick_MG+0x3>
    1c78:	40 90 59 01 	lds	r4, 0x0159	; 0x800159 <int_period>
    1c7c:	50 90 5a 01 	lds	r5, 0x015A	; 0x80015a <int_period+0x1>
    1c80:	60 90 5b 01 	lds	r6, 0x015B	; 0x80015b <int_period+0x2>
    1c84:	70 90 5c 01 	lds	r7, 0x015C	; 0x80015c <int_period+0x3>
    1c88:	66 b5       	in	r22, 0x26	; 38
    1c8a:	c0 90 55 01 	lds	r12, 0x0155	; 0x800155 <period>
    1c8e:	d0 90 56 01 	lds	r13, 0x0156	; 0x800156 <period+0x1>
    1c92:	e0 90 57 01 	lds	r14, 0x0157	; 0x800157 <period+0x2>
    1c96:	f0 90 58 01 	lds	r15, 0x0158	; 0x800158 <period+0x3>
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 3e 12 	call	0x247c	; 0x247c <__floatsisf>
    1ca4:	2d eb       	ldi	r18, 0xBD	; 189
    1ca6:	37 e3       	ldi	r19, 0x37	; 55
    1ca8:	46 e8       	ldi	r20, 0x86	; 134
    1caa:	56 e3       	ldi	r21, 0x36	; 54
    1cac:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1cb0:	69 83       	std	Y+1, r22	; 0x01
    1cb2:	7a 83       	std	Y+2, r23	; 0x02
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	a3 01       	movw	r20, r6
    1cba:	92 01       	movw	r18, r4
    1cbc:	c5 01       	movw	r24, r10
    1cbe:	b4 01       	movw	r22, r8
    1cc0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    1cc4:	9b 01       	movw	r18, r22
    1cc6:	ac 01       	movw	r20, r24
    1cc8:	69 81       	ldd	r22, Y+1	; 0x01
    1cca:	7a 81       	ldd	r23, Y+2	; 0x02
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	48 ec       	ldi	r20, 0xC8	; 200
    1cda:	52 e4       	ldi	r21, 0x42	; 66
    1cdc:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
    1ce0:	a7 01       	movw	r20, r14
    1ce2:	96 01       	movw	r18, r12
    1ce4:	0e 94 94 11 	call	0x2328	; 0x2328 <__divsf3>
    1ce8:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    1cec:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <aux1>
		break;
		
		case 128: //pcint7 changed
		break;
	}
}
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	bf 91       	pop	r27
    1d02:	af 91       	pop	r26
    1d04:	9f 91       	pop	r25
    1d06:	8f 91       	pop	r24
    1d08:	7f 91       	pop	r23
    1d0a:	6f 91       	pop	r22
    1d0c:	5f 91       	pop	r21
    1d0e:	4f 91       	pop	r20
    1d10:	3f 91       	pop	r19
    1d12:	2f 91       	pop	r18
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
    1d1c:	bf 90       	pop	r11
    1d1e:	af 90       	pop	r10
    1d20:	9f 90       	pop	r9
    1d22:	8f 90       	pop	r8
    1d24:	7f 90       	pop	r7
    1d26:	6f 90       	pop	r6
    1d28:	5f 90       	pop	r5
    1d2a:	4f 90       	pop	r4
    1d2c:	0f 90       	pop	r0
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	0f 90       	pop	r0
    1d32:	1f 90       	pop	r1
    1d34:	18 95       	reti

00001d36 <interrupt_init>:

void interrupt_init(){
	Interrupt_Init_Rising_INT6();
    1d36:	0e 94 10 0c 	call	0x1820	; 0x1820 <Interrupt_Init_Rising_INT6>
	Int_6_En();
    1d3a:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Int_6_En>
	
	Pin_Change_En(0b10000000);
    1d3e:	80 e8       	ldi	r24, 0x80	; 128
    1d40:	0e 94 2d 0c 	call	0x185a	; 0x185a <Pin_Change_En>
    1d44:	08 95       	ret

00001d46 <timer3_16bit_PWM_initA>:
void timer_8bit_INT_init_COMPA(){
	TIMSK0 |= (1 << OCIE0A);
}

void timer_8bit_INT_init_OVF(){
	TIMSK0 |= (1 << TOIE0);
    1d46:	80 e4       	ldi	r24, 0x40	; 64
    1d48:	87 b9       	out	0x07, r24	; 7
    1d4a:	e0 e9       	ldi	r30, 0x90	; 144
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 68       	ori	r24, 0x80	; 128
    1d52:	80 83       	st	Z, r24
    1d54:	e1 e9       	ldi	r30, 0x91	; 145
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 61       	ori	r24, 0x10	; 16
    1d5c:	80 83       	st	Z, r24
    1d5e:	08 95       	ret

00001d60 <timer1_16bit_PWM_initABC>:
    1d60:	84 b1       	in	r24, 0x04	; 4
    1d62:	80 6e       	ori	r24, 0xE0	; 224
    1d64:	84 b9       	out	0x04, r24	; 4
    1d66:	e0 e8       	ldi	r30, 0x80	; 128
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 6a       	ori	r24, 0xA8	; 168
    1d6e:	80 83       	st	Z, r24
    1d70:	80 e1       	ldi	r24, 0x10	; 16
    1d72:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1d76:	08 95       	ret

00001d78 <timer_1_setCLK>:
    1d78:	80 34       	cpi	r24, 0x40	; 64
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	f1 f0       	breq	.+60     	; 0x1dba <timer_1_setCLK+0x42>
    1d7e:	30 f4       	brcc	.+12     	; 0x1d8c <timer_1_setCLK+0x14>
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f0       	breq	.+26     	; 0x1d9e <timer_1_setCLK+0x26>
    1d84:	88 30       	cpi	r24, 0x08	; 8
    1d86:	91 05       	cpc	r25, r1
    1d88:	91 f0       	breq	.+36     	; 0x1dae <timer_1_setCLK+0x36>
    1d8a:	29 c0       	rjmp	.+82     	; 0x1dde <timer_1_setCLK+0x66>
    1d8c:	81 15       	cp	r24, r1
    1d8e:	21 e0       	ldi	r18, 0x01	; 1
    1d90:	92 07       	cpc	r25, r18
    1d92:	c9 f0       	breq	.+50     	; 0x1dc6 <timer_1_setCLK+0x4e>
    1d94:	81 15       	cp	r24, r1
    1d96:	24 e0       	ldi	r18, 0x04	; 4
    1d98:	92 07       	cpc	r25, r18
    1d9a:	d9 f0       	breq	.+54     	; 0x1dd2 <timer_1_setCLK+0x5a>
    1d9c:	20 c0       	rjmp	.+64     	; 0x1dde <timer_1_setCLK+0x66>
    1d9e:	e1 e8       	ldi	r30, 0x81	; 129
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	81 60       	ori	r24, 0x01	; 1
    1da6:	80 83       	st	Z, r24
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	08 95       	ret
    1dae:	e1 e8       	ldi	r30, 0x81	; 129
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	20 81       	ld	r18, Z
    1db4:	22 60       	ori	r18, 0x02	; 2
    1db6:	20 83       	st	Z, r18
    1db8:	08 95       	ret
    1dba:	e1 e8       	ldi	r30, 0x81	; 129
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	20 81       	ld	r18, Z
    1dc0:	23 60       	ori	r18, 0x03	; 3
    1dc2:	20 83       	st	Z, r18
    1dc4:	08 95       	ret
    1dc6:	e1 e8       	ldi	r30, 0x81	; 129
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	20 81       	ld	r18, Z
    1dcc:	24 60       	ori	r18, 0x04	; 4
    1dce:	20 83       	st	Z, r18
    1dd0:	08 95       	ret
    1dd2:	e1 e8       	ldi	r30, 0x81	; 129
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	20 81       	ld	r18, Z
    1dd8:	26 60       	ori	r18, 0x06	; 6
    1dda:	20 83       	st	Z, r18
    1ddc:	08 95       	ret
    1dde:	e1 e8       	ldi	r30, 0x81	; 129
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	81 60       	ori	r24, 0x01	; 1
    1de6:	80 83       	st	Z, r24
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	08 95       	ret

00001dee <timer1_16bit_PWM_ABC>:
    1dee:	8f 92       	push	r8
    1df0:	9f 92       	push	r9
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	df 92       	push	r13
    1df8:	ef 92       	push	r14
    1dfa:	ff 92       	push	r15
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	d8 2e       	mov	r13, r24
    1e06:	e6 2e       	mov	r14, r22
    1e08:	f4 2e       	mov	r15, r20
    1e0a:	e9 01       	movw	r28, r18
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <timer_1_setCLK>
    1e12:	cc 0f       	add	r28, r28
    1e14:	dd 1f       	adc	r29, r29
    1e16:	9c 01       	movw	r18, r24
    1e18:	c2 9f       	mul	r28, r18
    1e1a:	c0 01       	movw	r24, r0
    1e1c:	c3 9f       	mul	r28, r19
    1e1e:	90 0d       	add	r25, r0
    1e20:	d2 9f       	mul	r29, r18
    1e22:	90 0d       	add	r25, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	9c 01       	movw	r18, r24
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	74 e2       	ldi	r23, 0x24	; 36
    1e30:	84 ef       	ldi	r24, 0xF4	; 244
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__udivmodsi4>
    1e38:	49 01       	movw	r8, r18
    1e3a:	5a 01       	movw	r10, r20
    1e3c:	36 95       	lsr	r19
    1e3e:	27 95       	ror	r18
    1e40:	36 95       	lsr	r19
    1e42:	27 95       	ror	r18
    1e44:	ab e7       	ldi	r26, 0x7B	; 123
    1e46:	b4 e1       	ldi	r27, 0x14	; 20
    1e48:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__umulhisi3>
    1e4c:	96 95       	lsr	r25
    1e4e:	87 95       	ror	r24
    1e50:	d8 9e       	mul	r13, r24
    1e52:	b0 01       	movw	r22, r0
    1e54:	d9 9e       	mul	r13, r25
    1e56:	70 0d       	add	r23, r0
    1e58:	11 24       	eor	r1, r1
    1e5a:	e8 9e       	mul	r14, r24
    1e5c:	a0 01       	movw	r20, r0
    1e5e:	e9 9e       	mul	r14, r25
    1e60:	50 0d       	add	r21, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	f8 9e       	mul	r15, r24
    1e66:	90 01       	movw	r18, r0
    1e68:	f9 9e       	mul	r15, r25
    1e6a:	30 0d       	add	r19, r0
    1e6c:	11 24       	eor	r1, r1
    1e6e:	8f b7       	in	r24, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	90 92 87 00 	sts	0x0087, r9	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1e76:	80 92 86 00 	sts	0x0086, r8	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1e7a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e7e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e82:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1e86:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1e8a:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    1e8e:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
    1e92:	8f bf       	out	0x3f, r24	; 63
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	9f 90       	pop	r9
    1ea8:	8f 90       	pop	r8
    1eaa:	08 95       	ret

00001eac <timer_3_setCLK>:
    1eac:	80 34       	cpi	r24, 0x40	; 64
    1eae:	91 05       	cpc	r25, r1
    1eb0:	f1 f0       	breq	.+60     	; 0x1eee <timer_3_setCLK+0x42>
    1eb2:	30 f4       	brcc	.+12     	; 0x1ec0 <timer_3_setCLK+0x14>
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	69 f0       	breq	.+26     	; 0x1ed2 <timer_3_setCLK+0x26>
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	91 05       	cpc	r25, r1
    1ebc:	91 f0       	breq	.+36     	; 0x1ee2 <timer_3_setCLK+0x36>
    1ebe:	29 c0       	rjmp	.+82     	; 0x1f12 <timer_3_setCLK+0x66>
    1ec0:	81 15       	cp	r24, r1
    1ec2:	21 e0       	ldi	r18, 0x01	; 1
    1ec4:	92 07       	cpc	r25, r18
    1ec6:	c9 f0       	breq	.+50     	; 0x1efa <timer_3_setCLK+0x4e>
    1ec8:	81 15       	cp	r24, r1
    1eca:	24 e0       	ldi	r18, 0x04	; 4
    1ecc:	92 07       	cpc	r25, r18
    1ece:	d9 f0       	breq	.+54     	; 0x1f06 <timer_3_setCLK+0x5a>
    1ed0:	20 c0       	rjmp	.+64     	; 0x1f12 <timer_3_setCLK+0x66>
    1ed2:	e1 e9       	ldi	r30, 0x91	; 145
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	81 60       	ori	r24, 0x01	; 1
    1eda:	80 83       	st	Z, r24
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	08 95       	ret
    1ee2:	e1 e9       	ldi	r30, 0x91	; 145
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	20 81       	ld	r18, Z
    1ee8:	22 60       	ori	r18, 0x02	; 2
    1eea:	20 83       	st	Z, r18
    1eec:	08 95       	ret
    1eee:	e1 e9       	ldi	r30, 0x91	; 145
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	20 81       	ld	r18, Z
    1ef4:	23 60       	ori	r18, 0x03	; 3
    1ef6:	20 83       	st	Z, r18
    1ef8:	08 95       	ret
    1efa:	e1 e9       	ldi	r30, 0x91	; 145
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	20 81       	ld	r18, Z
    1f00:	24 60       	ori	r18, 0x04	; 4
    1f02:	20 83       	st	Z, r18
    1f04:	08 95       	ret
    1f06:	e1 e9       	ldi	r30, 0x91	; 145
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	20 81       	ld	r18, Z
    1f0c:	26 60       	ori	r18, 0x06	; 6
    1f0e:	20 83       	st	Z, r18
    1f10:	08 95       	ret
    1f12:	e1 e9       	ldi	r30, 0x91	; 145
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	81 60       	ori	r24, 0x01	; 1
    1f1a:	80 83       	st	Z, r24
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	08 95       	ret

00001f22 <timer3_16bit_PWM_A>:
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	1f 93       	push	r17
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	18 2f       	mov	r17, r24
    1f32:	eb 01       	movw	r28, r22
    1f34:	ca 01       	movw	r24, r20
    1f36:	0e 94 56 0f 	call	0x1eac	; 0x1eac <timer_3_setCLK>
    1f3a:	cc 0f       	add	r28, r28
    1f3c:	dd 1f       	adc	r29, r29
    1f3e:	9c 01       	movw	r18, r24
    1f40:	c2 9f       	mul	r28, r18
    1f42:	c0 01       	movw	r24, r0
    1f44:	c3 9f       	mul	r28, r19
    1f46:	90 0d       	add	r25, r0
    1f48:	d2 9f       	mul	r29, r18
    1f4a:	90 0d       	add	r25, r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	9c 01       	movw	r18, r24
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	74 e2       	ldi	r23, 0x24	; 36
    1f58:	84 ef       	ldi	r24, 0xF4	; 244
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__udivmodsi4>
    1f60:	69 01       	movw	r12, r18
    1f62:	7a 01       	movw	r14, r20
    1f64:	36 95       	lsr	r19
    1f66:	27 95       	ror	r18
    1f68:	36 95       	lsr	r19
    1f6a:	27 95       	ror	r18
    1f6c:	ab e7       	ldi	r26, 0x7B	; 123
    1f6e:	b4 e1       	ldi	r27, 0x14	; 20
    1f70:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__umulhisi3>
    1f74:	96 95       	lsr	r25
    1f76:	87 95       	ror	r24
    1f78:	18 9f       	mul	r17, r24
    1f7a:	90 01       	movw	r18, r0
    1f7c:	19 9f       	mul	r17, r25
    1f7e:	30 0d       	add	r19, r0
    1f80:	11 24       	eor	r1, r1
    1f82:	8f b7       	in	r24, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	d0 92 97 00 	sts	0x0097, r13	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
    1f8a:	c0 92 96 00 	sts	0x0096, r12	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
    1f8e:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1f92:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1f96:	8f bf       	out	0x3f, r24	; 63
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	df 90       	pop	r13
    1fa4:	cf 90       	pop	r12
    1fa6:	08 95       	ret

00001fa8 <timer_8bit_setCLK>:
    1fa8:	80 34       	cpi	r24, 0x40	; 64
    1faa:	91 05       	cpc	r25, r1
    1fac:	d1 f0       	breq	.+52     	; 0x1fe2 <timer_8bit_setCLK+0x3a>
    1fae:	30 f4       	brcc	.+12     	; 0x1fbc <timer_8bit_setCLK+0x14>
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	69 f0       	breq	.+26     	; 0x1fce <timer_8bit_setCLK+0x26>
    1fb4:	88 30       	cpi	r24, 0x08	; 8
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	81 f0       	breq	.+32     	; 0x1fda <timer_8bit_setCLK+0x32>
    1fba:	1f c0       	rjmp	.+62     	; 0x1ffa <timer_8bit_setCLK+0x52>
    1fbc:	81 15       	cp	r24, r1
    1fbe:	21 e0       	ldi	r18, 0x01	; 1
    1fc0:	92 07       	cpc	r25, r18
    1fc2:	99 f0       	breq	.+38     	; 0x1fea <timer_8bit_setCLK+0x42>
    1fc4:	81 15       	cp	r24, r1
    1fc6:	24 e0       	ldi	r18, 0x04	; 4
    1fc8:	92 07       	cpc	r25, r18
    1fca:	99 f0       	breq	.+38     	; 0x1ff2 <timer_8bit_setCLK+0x4a>
    1fcc:	16 c0       	rjmp	.+44     	; 0x1ffa <timer_8bit_setCLK+0x52>
    1fce:	85 b5       	in	r24, 0x25	; 37
    1fd0:	81 60       	ori	r24, 0x01	; 1
    1fd2:	85 bd       	out	0x25, r24	; 37
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	08 95       	ret
    1fda:	25 b5       	in	r18, 0x25	; 37
    1fdc:	22 60       	ori	r18, 0x02	; 2
    1fde:	25 bd       	out	0x25, r18	; 37
    1fe0:	08 95       	ret
    1fe2:	25 b5       	in	r18, 0x25	; 37
    1fe4:	23 60       	ori	r18, 0x03	; 3
    1fe6:	25 bd       	out	0x25, r18	; 37
    1fe8:	08 95       	ret
    1fea:	25 b5       	in	r18, 0x25	; 37
    1fec:	24 60       	ori	r18, 0x04	; 4
    1fee:	25 bd       	out	0x25, r18	; 37
    1ff0:	08 95       	ret
    1ff2:	25 b5       	in	r18, 0x25	; 37
    1ff4:	26 60       	ori	r18, 0x06	; 6
    1ff6:	25 bd       	out	0x25, r18	; 37
    1ff8:	08 95       	ret
    1ffa:	85 b5       	in	r24, 0x25	; 37
    1ffc:	81 60       	ori	r24, 0x01	; 1
    1ffe:	85 bd       	out	0x25, r24	; 37
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	08 95       	ret

00002006 <timer_8bit_CTC_init>:
    2006:	cf 93       	push	r28
    2008:	c8 2f       	mov	r28, r24
    200a:	cb 01       	movw	r24, r22
    200c:	22 e0       	ldi	r18, 0x02	; 2
    200e:	24 bd       	out	0x24, r18	; 36
    2010:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <timer_8bit_setCLK>
    2014:	c7 bd       	out	0x27, r28	; 39
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <timer_8bit_INT_init_COMPA>:
    201a:	ee e6       	ldi	r30, 0x6E	; 110
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	82 60       	ori	r24, 0x02	; 2
    2022:	80 83       	st	Z, r24
    2024:	08 95       	ret

00002026 <__vector_20>:
}

ISR(TIMER1_OVF_vect){
    2026:	1f 92       	push	r1
    2028:	0f 92       	push	r0
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	0f 92       	push	r0
    202e:	11 24       	eor	r1, r1
	
}
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	0f 90       	pop	r0
    2036:	1f 90       	pop	r1
    2038:	18 95       	reti

0000203a <__vector_35>:

ISR(TIMER3_OVF_vect){
    203a:	1f 92       	push	r1
    203c:	0f 92       	push	r0
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	0f 92       	push	r0
    2042:	11 24       	eor	r1, r1
	
}
    2044:	0f 90       	pop	r0
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	0f 90       	pop	r0
    204a:	1f 90       	pop	r1
    204c:	18 95       	reti

0000204e <__vector_16>:

ISR(TIMER1_CAPT_vect){
    204e:	1f 92       	push	r1
    2050:	0f 92       	push	r0
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	0f 92       	push	r0
    2056:	11 24       	eor	r1, r1
	//system_tick_MG++;
}
    2058:	0f 90       	pop	r0
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	0f 90       	pop	r0
    205e:	1f 90       	pop	r1
    2060:	18 95       	reti

00002062 <__vector_31>:

ISR(TIMER3_CAPT_vect){
    2062:	1f 92       	push	r1
    2064:	0f 92       	push	r0
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	0f 92       	push	r0
    206a:	11 24       	eor	r1, r1
	//system_tick_MG++;
}
    206c:	0f 90       	pop	r0
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	0f 90       	pop	r0
    2072:	1f 90       	pop	r1
    2074:	18 95       	reti

00002076 <__vector_21>:

ISR(TIMER0_COMPA_vect){ //scatta 1 volta al milli secondo
    2076:	1f 92       	push	r1
    2078:	0f 92       	push	r0
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	0f 92       	push	r0
    207e:	11 24       	eor	r1, r1
    2080:	2f 93       	push	r18
    2082:	3f 93       	push	r19
    2084:	4f 93       	push	r20
    2086:	5f 93       	push	r21
    2088:	6f 93       	push	r22
    208a:	7f 93       	push	r23
    208c:	8f 93       	push	r24
    208e:	9f 93       	push	r25
    2090:	af 93       	push	r26
    2092:	bf 93       	push	r27
    2094:	ef 93       	push	r30
    2096:	ff 93       	push	r31
	//system_tick_MG = system_tick_MG + 249; //Ogni ms aggiungo 249 al contatore.
	system_tick_MG = system_tick_MG + 0.001;
    2098:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <system_tick_MG>
    209c:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <system_tick_MG+0x1>
    20a0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <system_tick_MG+0x2>
    20a4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <system_tick_MG+0x3>
    20a8:	2f e6       	ldi	r18, 0x6F	; 111
    20aa:	32 e1       	ldi	r19, 0x12	; 18
    20ac:	43 e8       	ldi	r20, 0x83	; 131
    20ae:	5a e3       	ldi	r21, 0x3A	; 58
    20b0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__addsf3>
    20b4:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <system_tick_MG>
    20b8:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <system_tick_MG+0x1>
    20bc:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <system_tick_MG+0x2>
    20c0:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <system_tick_MG+0x3>
	// 		if (PORTC == 0)
	// 		{
	// 			PORTC = 0xff;
	// 		}
	// 	}
}
    20c4:	ff 91       	pop	r31
    20c6:	ef 91       	pop	r30
    20c8:	bf 91       	pop	r27
    20ca:	af 91       	pop	r26
    20cc:	9f 91       	pop	r25
    20ce:	8f 91       	pop	r24
    20d0:	7f 91       	pop	r23
    20d2:	6f 91       	pop	r22
    20d4:	5f 91       	pop	r21
    20d6:	4f 91       	pop	r20
    20d8:	3f 91       	pop	r19
    20da:	2f 91       	pop	r18
    20dc:	0f 90       	pop	r0
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	0f 90       	pop	r0
    20e2:	1f 90       	pop	r1
    20e4:	18 95       	reti

000020e6 <timer_init>:

void timer_init(){
	timer1_16bit_PWM_initABC();
    20e6:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <timer1_16bit_PWM_initABC>
	timer3_16bit_PWM_initA();
    20ea:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <timer3_16bit_PWM_initA>
	
	timer_8bit_CTC_init(249, 64);
    20ee:	60 e4       	ldi	r22, 0x40	; 64
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	89 ef       	ldi	r24, 0xF9	; 249
    20f4:	0e 94 03 10 	call	0x2006	; 0x2006 <timer_8bit_CTC_init>
	timer_8bit_INT_init_COMPA();
    20f8:	0e 94 0d 10 	call	0x201a	; 0x201a <timer_8bit_INT_init_COMPA>
    20fc:	08 95       	ret

000020fe <USART_Init>:
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) ) //W8 for USART Data Register Empty
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
    20fe:	a0 e0       	ldi	r26, 0x00	; 0
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	aa 1f       	adc	r26, r26
    2108:	bb 1f       	adc	r27, r27
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	aa 1f       	adc	r26, r26
    2110:	bb 1f       	adc	r27, r27
    2112:	9c 01       	movw	r18, r24
    2114:	ad 01       	movw	r20, r26
    2116:	22 0f       	add	r18, r18
    2118:	33 1f       	adc	r19, r19
    211a:	44 1f       	adc	r20, r20
    211c:	55 1f       	adc	r21, r21
    211e:	22 0f       	add	r18, r18
    2120:	33 1f       	adc	r19, r19
    2122:	44 1f       	adc	r20, r20
    2124:	55 1f       	adc	r21, r21
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	74 e2       	ldi	r23, 0x24	; 36
    212a:	84 ef       	ldi	r24, 0xF4	; 244
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__udivmodsi4>
    2132:	21 50       	subi	r18, 0x01	; 1
    2134:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    2138:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    213c:	e9 ec       	ldi	r30, 0xC9	; 201
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 e8       	ldi	r24, 0x80	; 128
    2142:	80 83       	st	Z, r24
    2144:	86 e0       	ldi	r24, 0x06	; 6
    2146:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    214a:	80 81       	ld	r24, Z
    214c:	88 61       	ori	r24, 0x18	; 24
    214e:	80 83       	st	Z, r24
    2150:	08 95       	ret

00002152 <USART_Transmit>:
    2152:	e8 ec       	ldi	r30, 0xC8	; 200
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	90 81       	ld	r25, Z
    2158:	95 ff       	sbrs	r25, 5
    215a:	fd cf       	rjmp	.-6      	; 0x2156 <USART_Transmit+0x4>
    215c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    2160:	08 95       	ret

00002162 <USART_String>:
}

void USART_String(char* string, uint8_t lenght){
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
	for (int i=0; i< lenght; i++)
    216a:	66 23       	and	r22, r22
    216c:	51 f0       	breq	.+20     	; 0x2182 <USART_String+0x20>
    216e:	8c 01       	movw	r16, r24
    2170:	ec 01       	movw	r28, r24
    2172:	06 0f       	add	r16, r22
    2174:	11 1d       	adc	r17, r1
	{
		USART_Transmit(string[i]);
    2176:	89 91       	ld	r24, Y+
    2178:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR1 = data;
}

void USART_String(char* string, uint8_t lenght){
	for (int i=0; i< lenght; i++)
    217c:	c0 17       	cp	r28, r16
    217e:	d1 07       	cpc	r29, r17
    2180:	d1 f7       	brne	.-12     	; 0x2176 <USART_String+0x14>
	{
		USART_Transmit(string[i]);
	}
}
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	08 95       	ret

0000218c <__vector_25>:


ISR(USART1_RX_vect){
    218c:	1f 92       	push	r1
    218e:	0f 92       	push	r0
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	0f 92       	push	r0
    2194:	11 24       	eor	r1, r1
    2196:	2f 93       	push	r18
    2198:	3f 93       	push	r19
    219a:	4f 93       	push	r20
    219c:	5f 93       	push	r21
    219e:	6f 93       	push	r22
    21a0:	7f 93       	push	r23
    21a2:	8f 93       	push	r24
    21a4:	9f 93       	push	r25
    21a6:	af 93       	push	r26
    21a8:	bf 93       	push	r27
    21aa:	ef 93       	push	r30
    21ac:	ff 93       	push	r31
	if ((FE1 == 1) | (DOR1 == 1) | (UPE1 == 1) )
	{
		ISR_USART_Receive = 255;
	}
	
	ISR_USART_Receive = UDR1;
    21ae:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    21b2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ISR_USART_Receive>
	USART_Transmit(ISR_USART_Receive);
    21b6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ISR_USART_Receive>
    21ba:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
	selected_value(ISR_USART_Receive);
    21be:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ISR_USART_Receive>
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 8c 00 	call	0x118	; 0x118 <selected_value>
	USART_Transmit('\n');
    21c8:	8a e0       	ldi	r24, 0x0A	; 10
    21ca:	0e 94 a9 10 	call	0x2152	; 0x2152 <USART_Transmit>
}
    21ce:	ff 91       	pop	r31
    21d0:	ef 91       	pop	r30
    21d2:	bf 91       	pop	r27
    21d4:	af 91       	pop	r26
    21d6:	9f 91       	pop	r25
    21d8:	8f 91       	pop	r24
    21da:	7f 91       	pop	r23
    21dc:	6f 91       	pop	r22
    21de:	5f 91       	pop	r21
    21e0:	4f 91       	pop	r20
    21e2:	3f 91       	pop	r19
    21e4:	2f 91       	pop	r18
    21e6:	0f 90       	pop	r0
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	0f 90       	pop	r0
    21ec:	1f 90       	pop	r1
    21ee:	18 95       	reti

000021f0 <__subsf3>:
    21f0:	50 58       	subi	r21, 0x80	; 128

000021f2 <__addsf3>:
    21f2:	bb 27       	eor	r27, r27
    21f4:	aa 27       	eor	r26, r26
    21f6:	0e 94 10 11 	call	0x2220	; 0x2220 <__addsf3x>
    21fa:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__fp_round>
    21fe:	0e 94 a9 12 	call	0x2552	; 0x2552 <__fp_pscA>
    2202:	38 f0       	brcs	.+14     	; 0x2212 <__addsf3+0x20>
    2204:	0e 94 b0 12 	call	0x2560	; 0x2560 <__fp_pscB>
    2208:	20 f0       	brcs	.+8      	; 0x2212 <__addsf3+0x20>
    220a:	39 f4       	brne	.+14     	; 0x221a <__addsf3+0x28>
    220c:	9f 3f       	cpi	r25, 0xFF	; 255
    220e:	19 f4       	brne	.+6      	; 0x2216 <__addsf3+0x24>
    2210:	26 f4       	brtc	.+8      	; 0x221a <__addsf3+0x28>
    2212:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__fp_nan>
    2216:	0e f4       	brtc	.+2      	; 0x221a <__addsf3+0x28>
    2218:	e0 95       	com	r30
    221a:	e7 fb       	bst	r30, 7
    221c:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__fp_inf>

00002220 <__addsf3x>:
    2220:	e9 2f       	mov	r30, r25
    2222:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_split3>
    2226:	58 f3       	brcs	.-42     	; 0x21fe <__addsf3+0xc>
    2228:	ba 17       	cp	r27, r26
    222a:	62 07       	cpc	r22, r18
    222c:	73 07       	cpc	r23, r19
    222e:	84 07       	cpc	r24, r20
    2230:	95 07       	cpc	r25, r21
    2232:	20 f0       	brcs	.+8      	; 0x223c <__addsf3x+0x1c>
    2234:	79 f4       	brne	.+30     	; 0x2254 <__addsf3x+0x34>
    2236:	a6 f5       	brtc	.+104    	; 0x22a0 <__addsf3x+0x80>
    2238:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_zero>
    223c:	0e f4       	brtc	.+2      	; 0x2240 <__addsf3x+0x20>
    223e:	e0 95       	com	r30
    2240:	0b 2e       	mov	r0, r27
    2242:	ba 2f       	mov	r27, r26
    2244:	a0 2d       	mov	r26, r0
    2246:	0b 01       	movw	r0, r22
    2248:	b9 01       	movw	r22, r18
    224a:	90 01       	movw	r18, r0
    224c:	0c 01       	movw	r0, r24
    224e:	ca 01       	movw	r24, r20
    2250:	a0 01       	movw	r20, r0
    2252:	11 24       	eor	r1, r1
    2254:	ff 27       	eor	r31, r31
    2256:	59 1b       	sub	r21, r25
    2258:	99 f0       	breq	.+38     	; 0x2280 <__addsf3x+0x60>
    225a:	59 3f       	cpi	r21, 0xF9	; 249
    225c:	50 f4       	brcc	.+20     	; 0x2272 <__addsf3x+0x52>
    225e:	50 3e       	cpi	r21, 0xE0	; 224
    2260:	68 f1       	brcs	.+90     	; 0x22bc <__addsf3x+0x9c>
    2262:	1a 16       	cp	r1, r26
    2264:	f0 40       	sbci	r31, 0x00	; 0
    2266:	a2 2f       	mov	r26, r18
    2268:	23 2f       	mov	r18, r19
    226a:	34 2f       	mov	r19, r20
    226c:	44 27       	eor	r20, r20
    226e:	58 5f       	subi	r21, 0xF8	; 248
    2270:	f3 cf       	rjmp	.-26     	; 0x2258 <__addsf3x+0x38>
    2272:	46 95       	lsr	r20
    2274:	37 95       	ror	r19
    2276:	27 95       	ror	r18
    2278:	a7 95       	ror	r26
    227a:	f0 40       	sbci	r31, 0x00	; 0
    227c:	53 95       	inc	r21
    227e:	c9 f7       	brne	.-14     	; 0x2272 <__addsf3x+0x52>
    2280:	7e f4       	brtc	.+30     	; 0x22a0 <__addsf3x+0x80>
    2282:	1f 16       	cp	r1, r31
    2284:	ba 0b       	sbc	r27, r26
    2286:	62 0b       	sbc	r22, r18
    2288:	73 0b       	sbc	r23, r19
    228a:	84 0b       	sbc	r24, r20
    228c:	ba f0       	brmi	.+46     	; 0x22bc <__addsf3x+0x9c>
    228e:	91 50       	subi	r25, 0x01	; 1
    2290:	a1 f0       	breq	.+40     	; 0x22ba <__addsf3x+0x9a>
    2292:	ff 0f       	add	r31, r31
    2294:	bb 1f       	adc	r27, r27
    2296:	66 1f       	adc	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	c2 f7       	brpl	.-16     	; 0x228e <__addsf3x+0x6e>
    229e:	0e c0       	rjmp	.+28     	; 0x22bc <__addsf3x+0x9c>
    22a0:	ba 0f       	add	r27, r26
    22a2:	62 1f       	adc	r22, r18
    22a4:	73 1f       	adc	r23, r19
    22a6:	84 1f       	adc	r24, r20
    22a8:	48 f4       	brcc	.+18     	; 0x22bc <__addsf3x+0x9c>
    22aa:	87 95       	ror	r24
    22ac:	77 95       	ror	r23
    22ae:	67 95       	ror	r22
    22b0:	b7 95       	ror	r27
    22b2:	f7 95       	ror	r31
    22b4:	9e 3f       	cpi	r25, 0xFE	; 254
    22b6:	08 f0       	brcs	.+2      	; 0x22ba <__addsf3x+0x9a>
    22b8:	b0 cf       	rjmp	.-160    	; 0x221a <__addsf3+0x28>
    22ba:	93 95       	inc	r25
    22bc:	88 0f       	add	r24, r24
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <__addsf3x+0xa2>
    22c0:	99 27       	eor	r25, r25
    22c2:	ee 0f       	add	r30, r30
    22c4:	97 95       	ror	r25
    22c6:	87 95       	ror	r24
    22c8:	08 95       	ret

000022ca <atan>:
    22ca:	df 93       	push	r29
    22cc:	dd 27       	eor	r29, r29
    22ce:	b9 2f       	mov	r27, r25
    22d0:	bf 77       	andi	r27, 0x7F	; 127
    22d2:	40 e8       	ldi	r20, 0x80	; 128
    22d4:	5f e3       	ldi	r21, 0x3F	; 63
    22d6:	16 16       	cp	r1, r22
    22d8:	17 06       	cpc	r1, r23
    22da:	48 07       	cpc	r20, r24
    22dc:	5b 07       	cpc	r21, r27
    22de:	18 f4       	brcc	.+6      	; 0x22e6 <atan+0x1c>
    22e0:	d9 2f       	mov	r29, r25
    22e2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <inverse>
    22e6:	9f 93       	push	r25
    22e8:	8f 93       	push	r24
    22ea:	7f 93       	push	r23
    22ec:	6f 93       	push	r22
    22ee:	0e 94 ac 13 	call	0x2758	; 0x2758 <square>
    22f2:	ec ea       	ldi	r30, 0xAC	; 172
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	0e 94 82 12 	call	0x2504	; 0x2504 <__fp_powser>
    22fa:	0e 94 b7 12 	call	0x256e	; 0x256e <__fp_round>
    22fe:	2f 91       	pop	r18
    2300:	3f 91       	pop	r19
    2302:	4f 91       	pop	r20
    2304:	5f 91       	pop	r21
    2306:	0e 94 0c 13 	call	0x2618	; 0x2618 <__mulsf3x>
    230a:	dd 23       	and	r29, r29
    230c:	51 f0       	breq	.+20     	; 0x2322 <atan+0x58>
    230e:	90 58       	subi	r25, 0x80	; 128
    2310:	a2 ea       	ldi	r26, 0xA2	; 162
    2312:	2a ed       	ldi	r18, 0xDA	; 218
    2314:	3f e0       	ldi	r19, 0x0F	; 15
    2316:	49 ec       	ldi	r20, 0xC9	; 201
    2318:	5f e3       	ldi	r21, 0x3F	; 63
    231a:	d0 78       	andi	r29, 0x80	; 128
    231c:	5d 27       	eor	r21, r29
    231e:	0e 94 10 11 	call	0x2220	; 0x2220 <__addsf3x>
    2322:	df 91       	pop	r29
    2324:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__fp_round>

00002328 <__divsf3>:
    2328:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divsf3x>
    232c:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__fp_round>
    2330:	0e 94 b0 12 	call	0x2560	; 0x2560 <__fp_pscB>
    2334:	58 f0       	brcs	.+22     	; 0x234c <__divsf3+0x24>
    2336:	0e 94 a9 12 	call	0x2552	; 0x2552 <__fp_pscA>
    233a:	40 f0       	brcs	.+16     	; 0x234c <__divsf3+0x24>
    233c:	29 f4       	brne	.+10     	; 0x2348 <__divsf3+0x20>
    233e:	5f 3f       	cpi	r21, 0xFF	; 255
    2340:	29 f0       	breq	.+10     	; 0x234c <__divsf3+0x24>
    2342:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__fp_inf>
    2346:	51 11       	cpse	r21, r1
    2348:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__fp_szero>
    234c:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__fp_nan>

00002350 <__divsf3x>:
    2350:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_split3>
    2354:	68 f3       	brcs	.-38     	; 0x2330 <__divsf3+0x8>

00002356 <__divsf3_pse>:
    2356:	99 23       	and	r25, r25
    2358:	b1 f3       	breq	.-20     	; 0x2346 <__divsf3+0x1e>
    235a:	55 23       	and	r21, r21
    235c:	91 f3       	breq	.-28     	; 0x2342 <__divsf3+0x1a>
    235e:	95 1b       	sub	r25, r21
    2360:	55 0b       	sbc	r21, r21
    2362:	bb 27       	eor	r27, r27
    2364:	aa 27       	eor	r26, r26
    2366:	62 17       	cp	r22, r18
    2368:	73 07       	cpc	r23, r19
    236a:	84 07       	cpc	r24, r20
    236c:	38 f0       	brcs	.+14     	; 0x237c <__divsf3_pse+0x26>
    236e:	9f 5f       	subi	r25, 0xFF	; 255
    2370:	5f 4f       	sbci	r21, 0xFF	; 255
    2372:	22 0f       	add	r18, r18
    2374:	33 1f       	adc	r19, r19
    2376:	44 1f       	adc	r20, r20
    2378:	aa 1f       	adc	r26, r26
    237a:	a9 f3       	breq	.-22     	; 0x2366 <__divsf3_pse+0x10>
    237c:	35 d0       	rcall	.+106    	; 0x23e8 <__divsf3_pse+0x92>
    237e:	0e 2e       	mov	r0, r30
    2380:	3a f0       	brmi	.+14     	; 0x2390 <__divsf3_pse+0x3a>
    2382:	e0 e8       	ldi	r30, 0x80	; 128
    2384:	32 d0       	rcall	.+100    	; 0x23ea <__divsf3_pse+0x94>
    2386:	91 50       	subi	r25, 0x01	; 1
    2388:	50 40       	sbci	r21, 0x00	; 0
    238a:	e6 95       	lsr	r30
    238c:	00 1c       	adc	r0, r0
    238e:	ca f7       	brpl	.-14     	; 0x2382 <__divsf3_pse+0x2c>
    2390:	2b d0       	rcall	.+86     	; 0x23e8 <__divsf3_pse+0x92>
    2392:	fe 2f       	mov	r31, r30
    2394:	29 d0       	rcall	.+82     	; 0x23e8 <__divsf3_pse+0x92>
    2396:	66 0f       	add	r22, r22
    2398:	77 1f       	adc	r23, r23
    239a:	88 1f       	adc	r24, r24
    239c:	bb 1f       	adc	r27, r27
    239e:	26 17       	cp	r18, r22
    23a0:	37 07       	cpc	r19, r23
    23a2:	48 07       	cpc	r20, r24
    23a4:	ab 07       	cpc	r26, r27
    23a6:	b0 e8       	ldi	r27, 0x80	; 128
    23a8:	09 f0       	breq	.+2      	; 0x23ac <__divsf3_pse+0x56>
    23aa:	bb 0b       	sbc	r27, r27
    23ac:	80 2d       	mov	r24, r0
    23ae:	bf 01       	movw	r22, r30
    23b0:	ff 27       	eor	r31, r31
    23b2:	93 58       	subi	r25, 0x83	; 131
    23b4:	5f 4f       	sbci	r21, 0xFF	; 255
    23b6:	3a f0       	brmi	.+14     	; 0x23c6 <__divsf3_pse+0x70>
    23b8:	9e 3f       	cpi	r25, 0xFE	; 254
    23ba:	51 05       	cpc	r21, r1
    23bc:	78 f0       	brcs	.+30     	; 0x23dc <__divsf3_pse+0x86>
    23be:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__fp_inf>
    23c2:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__fp_szero>
    23c6:	5f 3f       	cpi	r21, 0xFF	; 255
    23c8:	e4 f3       	brlt	.-8      	; 0x23c2 <__divsf3_pse+0x6c>
    23ca:	98 3e       	cpi	r25, 0xE8	; 232
    23cc:	d4 f3       	brlt	.-12     	; 0x23c2 <__divsf3_pse+0x6c>
    23ce:	86 95       	lsr	r24
    23d0:	77 95       	ror	r23
    23d2:	67 95       	ror	r22
    23d4:	b7 95       	ror	r27
    23d6:	f7 95       	ror	r31
    23d8:	9f 5f       	subi	r25, 0xFF	; 255
    23da:	c9 f7       	brne	.-14     	; 0x23ce <__divsf3_pse+0x78>
    23dc:	88 0f       	add	r24, r24
    23de:	91 1d       	adc	r25, r1
    23e0:	96 95       	lsr	r25
    23e2:	87 95       	ror	r24
    23e4:	97 f9       	bld	r25, 7
    23e6:	08 95       	ret
    23e8:	e1 e0       	ldi	r30, 0x01	; 1
    23ea:	66 0f       	add	r22, r22
    23ec:	77 1f       	adc	r23, r23
    23ee:	88 1f       	adc	r24, r24
    23f0:	bb 1f       	adc	r27, r27
    23f2:	62 17       	cp	r22, r18
    23f4:	73 07       	cpc	r23, r19
    23f6:	84 07       	cpc	r24, r20
    23f8:	ba 07       	cpc	r27, r26
    23fa:	20 f0       	brcs	.+8      	; 0x2404 <__divsf3_pse+0xae>
    23fc:	62 1b       	sub	r22, r18
    23fe:	73 0b       	sbc	r23, r19
    2400:	84 0b       	sbc	r24, r20
    2402:	ba 0b       	sbc	r27, r26
    2404:	ee 1f       	adc	r30, r30
    2406:	88 f7       	brcc	.-30     	; 0x23ea <__divsf3_pse+0x94>
    2408:	e0 95       	com	r30
    240a:	08 95       	ret

0000240c <__fixsfsi>:
    240c:	0e 94 0d 12 	call	0x241a	; 0x241a <__fixunssfsi>
    2410:	68 94       	set
    2412:	b1 11       	cpse	r27, r1
    2414:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__fp_szero>
    2418:	08 95       	ret

0000241a <__fixunssfsi>:
    241a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fp_splitA>
    241e:	88 f0       	brcs	.+34     	; 0x2442 <__fixunssfsi+0x28>
    2420:	9f 57       	subi	r25, 0x7F	; 127
    2422:	98 f0       	brcs	.+38     	; 0x244a <__fixunssfsi+0x30>
    2424:	b9 2f       	mov	r27, r25
    2426:	99 27       	eor	r25, r25
    2428:	b7 51       	subi	r27, 0x17	; 23
    242a:	b0 f0       	brcs	.+44     	; 0x2458 <__fixunssfsi+0x3e>
    242c:	e1 f0       	breq	.+56     	; 0x2466 <__fixunssfsi+0x4c>
    242e:	66 0f       	add	r22, r22
    2430:	77 1f       	adc	r23, r23
    2432:	88 1f       	adc	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	1a f0       	brmi	.+6      	; 0x243e <__fixunssfsi+0x24>
    2438:	ba 95       	dec	r27
    243a:	c9 f7       	brne	.-14     	; 0x242e <__fixunssfsi+0x14>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <__fixunssfsi+0x4c>
    243e:	b1 30       	cpi	r27, 0x01	; 1
    2440:	91 f0       	breq	.+36     	; 0x2466 <__fixunssfsi+0x4c>
    2442:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__fp_zero>
    2446:	b1 e0       	ldi	r27, 0x01	; 1
    2448:	08 95       	ret
    244a:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_zero>
    244e:	67 2f       	mov	r22, r23
    2450:	78 2f       	mov	r23, r24
    2452:	88 27       	eor	r24, r24
    2454:	b8 5f       	subi	r27, 0xF8	; 248
    2456:	39 f0       	breq	.+14     	; 0x2466 <__fixunssfsi+0x4c>
    2458:	b9 3f       	cpi	r27, 0xF9	; 249
    245a:	cc f3       	brlt	.-14     	; 0x244e <__fixunssfsi+0x34>
    245c:	86 95       	lsr	r24
    245e:	77 95       	ror	r23
    2460:	67 95       	ror	r22
    2462:	b3 95       	inc	r27
    2464:	d9 f7       	brne	.-10     	; 0x245c <__fixunssfsi+0x42>
    2466:	3e f4       	brtc	.+14     	; 0x2476 <__fixunssfsi+0x5c>
    2468:	90 95       	com	r25
    246a:	80 95       	com	r24
    246c:	70 95       	com	r23
    246e:	61 95       	neg	r22
    2470:	7f 4f       	sbci	r23, 0xFF	; 255
    2472:	8f 4f       	sbci	r24, 0xFF	; 255
    2474:	9f 4f       	sbci	r25, 0xFF	; 255
    2476:	08 95       	ret

00002478 <__floatunsisf>:
    2478:	e8 94       	clt
    247a:	09 c0       	rjmp	.+18     	; 0x248e <__floatsisf+0x12>

0000247c <__floatsisf>:
    247c:	97 fb       	bst	r25, 7
    247e:	3e f4       	brtc	.+14     	; 0x248e <__floatsisf+0x12>
    2480:	90 95       	com	r25
    2482:	80 95       	com	r24
    2484:	70 95       	com	r23
    2486:	61 95       	neg	r22
    2488:	7f 4f       	sbci	r23, 0xFF	; 255
    248a:	8f 4f       	sbci	r24, 0xFF	; 255
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	99 23       	and	r25, r25
    2490:	a9 f0       	breq	.+42     	; 0x24bc <__floatsisf+0x40>
    2492:	f9 2f       	mov	r31, r25
    2494:	96 e9       	ldi	r25, 0x96	; 150
    2496:	bb 27       	eor	r27, r27
    2498:	93 95       	inc	r25
    249a:	f6 95       	lsr	r31
    249c:	87 95       	ror	r24
    249e:	77 95       	ror	r23
    24a0:	67 95       	ror	r22
    24a2:	b7 95       	ror	r27
    24a4:	f1 11       	cpse	r31, r1
    24a6:	f8 cf       	rjmp	.-16     	; 0x2498 <__floatsisf+0x1c>
    24a8:	fa f4       	brpl	.+62     	; 0x24e8 <__floatsisf+0x6c>
    24aa:	bb 0f       	add	r27, r27
    24ac:	11 f4       	brne	.+4      	; 0x24b2 <__floatsisf+0x36>
    24ae:	60 ff       	sbrs	r22, 0
    24b0:	1b c0       	rjmp	.+54     	; 0x24e8 <__floatsisf+0x6c>
    24b2:	6f 5f       	subi	r22, 0xFF	; 255
    24b4:	7f 4f       	sbci	r23, 0xFF	; 255
    24b6:	8f 4f       	sbci	r24, 0xFF	; 255
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	16 c0       	rjmp	.+44     	; 0x24e8 <__floatsisf+0x6c>
    24bc:	88 23       	and	r24, r24
    24be:	11 f0       	breq	.+4      	; 0x24c4 <__floatsisf+0x48>
    24c0:	96 e9       	ldi	r25, 0x96	; 150
    24c2:	11 c0       	rjmp	.+34     	; 0x24e6 <__floatsisf+0x6a>
    24c4:	77 23       	and	r23, r23
    24c6:	21 f0       	breq	.+8      	; 0x24d0 <__floatsisf+0x54>
    24c8:	9e e8       	ldi	r25, 0x8E	; 142
    24ca:	87 2f       	mov	r24, r23
    24cc:	76 2f       	mov	r23, r22
    24ce:	05 c0       	rjmp	.+10     	; 0x24da <__floatsisf+0x5e>
    24d0:	66 23       	and	r22, r22
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <__floatsisf+0x74>
    24d4:	96 e8       	ldi	r25, 0x86	; 134
    24d6:	86 2f       	mov	r24, r22
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	2a f0       	brmi	.+10     	; 0x24e8 <__floatsisf+0x6c>
    24de:	9a 95       	dec	r25
    24e0:	66 0f       	add	r22, r22
    24e2:	77 1f       	adc	r23, r23
    24e4:	88 1f       	adc	r24, r24
    24e6:	da f7       	brpl	.-10     	; 0x24de <__floatsisf+0x62>
    24e8:	88 0f       	add	r24, r24
    24ea:	96 95       	lsr	r25
    24ec:	87 95       	ror	r24
    24ee:	97 f9       	bld	r25, 7
    24f0:	08 95       	ret

000024f2 <__fp_inf>:
    24f2:	97 f9       	bld	r25, 7
    24f4:	9f 67       	ori	r25, 0x7F	; 127
    24f6:	80 e8       	ldi	r24, 0x80	; 128
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	08 95       	ret

000024fe <__fp_nan>:
    24fe:	9f ef       	ldi	r25, 0xFF	; 255
    2500:	80 ec       	ldi	r24, 0xC0	; 192
    2502:	08 95       	ret

00002504 <__fp_powser>:
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	1f 93       	push	r17
    250a:	0f 93       	push	r16
    250c:	ff 92       	push	r15
    250e:	ef 92       	push	r14
    2510:	df 92       	push	r13
    2512:	7b 01       	movw	r14, r22
    2514:	8c 01       	movw	r16, r24
    2516:	68 94       	set
    2518:	06 c0       	rjmp	.+12     	; 0x2526 <__fp_powser+0x22>
    251a:	da 2e       	mov	r13, r26
    251c:	ef 01       	movw	r28, r30
    251e:	0e 94 0c 13 	call	0x2618	; 0x2618 <__mulsf3x>
    2522:	fe 01       	movw	r30, r28
    2524:	e8 94       	clt
    2526:	a5 91       	lpm	r26, Z+
    2528:	25 91       	lpm	r18, Z+
    252a:	35 91       	lpm	r19, Z+
    252c:	45 91       	lpm	r20, Z+
    252e:	55 91       	lpm	r21, Z+
    2530:	a6 f3       	brts	.-24     	; 0x251a <__fp_powser+0x16>
    2532:	ef 01       	movw	r28, r30
    2534:	0e 94 10 11 	call	0x2220	; 0x2220 <__addsf3x>
    2538:	fe 01       	movw	r30, r28
    253a:	97 01       	movw	r18, r14
    253c:	a8 01       	movw	r20, r16
    253e:	da 94       	dec	r13
    2540:	69 f7       	brne	.-38     	; 0x251c <__fp_powser+0x18>
    2542:	df 90       	pop	r13
    2544:	ef 90       	pop	r14
    2546:	ff 90       	pop	r15
    2548:	0f 91       	pop	r16
    254a:	1f 91       	pop	r17
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <__fp_pscA>:
    2552:	00 24       	eor	r0, r0
    2554:	0a 94       	dec	r0
    2556:	16 16       	cp	r1, r22
    2558:	17 06       	cpc	r1, r23
    255a:	18 06       	cpc	r1, r24
    255c:	09 06       	cpc	r0, r25
    255e:	08 95       	ret

00002560 <__fp_pscB>:
    2560:	00 24       	eor	r0, r0
    2562:	0a 94       	dec	r0
    2564:	12 16       	cp	r1, r18
    2566:	13 06       	cpc	r1, r19
    2568:	14 06       	cpc	r1, r20
    256a:	05 06       	cpc	r0, r21
    256c:	08 95       	ret

0000256e <__fp_round>:
    256e:	09 2e       	mov	r0, r25
    2570:	03 94       	inc	r0
    2572:	00 0c       	add	r0, r0
    2574:	11 f4       	brne	.+4      	; 0x257a <__fp_round+0xc>
    2576:	88 23       	and	r24, r24
    2578:	52 f0       	brmi	.+20     	; 0x258e <__fp_round+0x20>
    257a:	bb 0f       	add	r27, r27
    257c:	40 f4       	brcc	.+16     	; 0x258e <__fp_round+0x20>
    257e:	bf 2b       	or	r27, r31
    2580:	11 f4       	brne	.+4      	; 0x2586 <__fp_round+0x18>
    2582:	60 ff       	sbrs	r22, 0
    2584:	04 c0       	rjmp	.+8      	; 0x258e <__fp_round+0x20>
    2586:	6f 5f       	subi	r22, 0xFF	; 255
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	8f 4f       	sbci	r24, 0xFF	; 255
    258c:	9f 4f       	sbci	r25, 0xFF	; 255
    258e:	08 95       	ret

00002590 <__fp_split3>:
    2590:	57 fd       	sbrc	r21, 7
    2592:	90 58       	subi	r25, 0x80	; 128
    2594:	44 0f       	add	r20, r20
    2596:	55 1f       	adc	r21, r21
    2598:	59 f0       	breq	.+22     	; 0x25b0 <__fp_splitA+0x10>
    259a:	5f 3f       	cpi	r21, 0xFF	; 255
    259c:	71 f0       	breq	.+28     	; 0x25ba <__fp_splitA+0x1a>
    259e:	47 95       	ror	r20

000025a0 <__fp_splitA>:
    25a0:	88 0f       	add	r24, r24
    25a2:	97 fb       	bst	r25, 7
    25a4:	99 1f       	adc	r25, r25
    25a6:	61 f0       	breq	.+24     	; 0x25c0 <__fp_splitA+0x20>
    25a8:	9f 3f       	cpi	r25, 0xFF	; 255
    25aa:	79 f0       	breq	.+30     	; 0x25ca <__fp_splitA+0x2a>
    25ac:	87 95       	ror	r24
    25ae:	08 95       	ret
    25b0:	12 16       	cp	r1, r18
    25b2:	13 06       	cpc	r1, r19
    25b4:	14 06       	cpc	r1, r20
    25b6:	55 1f       	adc	r21, r21
    25b8:	f2 cf       	rjmp	.-28     	; 0x259e <__fp_split3+0xe>
    25ba:	46 95       	lsr	r20
    25bc:	f1 df       	rcall	.-30     	; 0x25a0 <__fp_splitA>
    25be:	08 c0       	rjmp	.+16     	; 0x25d0 <__fp_splitA+0x30>
    25c0:	16 16       	cp	r1, r22
    25c2:	17 06       	cpc	r1, r23
    25c4:	18 06       	cpc	r1, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	f1 cf       	rjmp	.-30     	; 0x25ac <__fp_splitA+0xc>
    25ca:	86 95       	lsr	r24
    25cc:	71 05       	cpc	r23, r1
    25ce:	61 05       	cpc	r22, r1
    25d0:	08 94       	sec
    25d2:	08 95       	ret

000025d4 <__fp_zero>:
    25d4:	e8 94       	clt

000025d6 <__fp_szero>:
    25d6:	bb 27       	eor	r27, r27
    25d8:	66 27       	eor	r22, r22
    25da:	77 27       	eor	r23, r23
    25dc:	cb 01       	movw	r24, r22
    25de:	97 f9       	bld	r25, 7
    25e0:	08 95       	ret

000025e2 <inverse>:
    25e2:	9b 01       	movw	r18, r22
    25e4:	ac 01       	movw	r20, r24
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	80 e8       	ldi	r24, 0x80	; 128
    25ec:	9f e3       	ldi	r25, 0x3F	; 63
    25ee:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__divsf3>

000025f2 <__mulsf3>:
    25f2:	0e 94 0c 13 	call	0x2618	; 0x2618 <__mulsf3x>
    25f6:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__fp_round>
    25fa:	0e 94 a9 12 	call	0x2552	; 0x2552 <__fp_pscA>
    25fe:	38 f0       	brcs	.+14     	; 0x260e <__mulsf3+0x1c>
    2600:	0e 94 b0 12 	call	0x2560	; 0x2560 <__fp_pscB>
    2604:	20 f0       	brcs	.+8      	; 0x260e <__mulsf3+0x1c>
    2606:	95 23       	and	r25, r21
    2608:	11 f0       	breq	.+4      	; 0x260e <__mulsf3+0x1c>
    260a:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__fp_inf>
    260e:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__fp_nan>
    2612:	11 24       	eor	r1, r1
    2614:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__fp_szero>

00002618 <__mulsf3x>:
    2618:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_split3>
    261c:	70 f3       	brcs	.-36     	; 0x25fa <__mulsf3+0x8>

0000261e <__mulsf3_pse>:
    261e:	95 9f       	mul	r25, r21
    2620:	c1 f3       	breq	.-16     	; 0x2612 <__mulsf3+0x20>
    2622:	95 0f       	add	r25, r21
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	55 1f       	adc	r21, r21
    2628:	62 9f       	mul	r22, r18
    262a:	f0 01       	movw	r30, r0
    262c:	72 9f       	mul	r23, r18
    262e:	bb 27       	eor	r27, r27
    2630:	f0 0d       	add	r31, r0
    2632:	b1 1d       	adc	r27, r1
    2634:	63 9f       	mul	r22, r19
    2636:	aa 27       	eor	r26, r26
    2638:	f0 0d       	add	r31, r0
    263a:	b1 1d       	adc	r27, r1
    263c:	aa 1f       	adc	r26, r26
    263e:	64 9f       	mul	r22, r20
    2640:	66 27       	eor	r22, r22
    2642:	b0 0d       	add	r27, r0
    2644:	a1 1d       	adc	r26, r1
    2646:	66 1f       	adc	r22, r22
    2648:	82 9f       	mul	r24, r18
    264a:	22 27       	eor	r18, r18
    264c:	b0 0d       	add	r27, r0
    264e:	a1 1d       	adc	r26, r1
    2650:	62 1f       	adc	r22, r18
    2652:	73 9f       	mul	r23, r19
    2654:	b0 0d       	add	r27, r0
    2656:	a1 1d       	adc	r26, r1
    2658:	62 1f       	adc	r22, r18
    265a:	83 9f       	mul	r24, r19
    265c:	a0 0d       	add	r26, r0
    265e:	61 1d       	adc	r22, r1
    2660:	22 1f       	adc	r18, r18
    2662:	74 9f       	mul	r23, r20
    2664:	33 27       	eor	r19, r19
    2666:	a0 0d       	add	r26, r0
    2668:	61 1d       	adc	r22, r1
    266a:	23 1f       	adc	r18, r19
    266c:	84 9f       	mul	r24, r20
    266e:	60 0d       	add	r22, r0
    2670:	21 1d       	adc	r18, r1
    2672:	82 2f       	mov	r24, r18
    2674:	76 2f       	mov	r23, r22
    2676:	6a 2f       	mov	r22, r26
    2678:	11 24       	eor	r1, r1
    267a:	9f 57       	subi	r25, 0x7F	; 127
    267c:	50 40       	sbci	r21, 0x00	; 0
    267e:	9a f0       	brmi	.+38     	; 0x26a6 <__mulsf3_pse+0x88>
    2680:	f1 f0       	breq	.+60     	; 0x26be <__mulsf3_pse+0xa0>
    2682:	88 23       	and	r24, r24
    2684:	4a f0       	brmi	.+18     	; 0x2698 <__mulsf3_pse+0x7a>
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	bb 1f       	adc	r27, r27
    268c:	66 1f       	adc	r22, r22
    268e:	77 1f       	adc	r23, r23
    2690:	88 1f       	adc	r24, r24
    2692:	91 50       	subi	r25, 0x01	; 1
    2694:	50 40       	sbci	r21, 0x00	; 0
    2696:	a9 f7       	brne	.-22     	; 0x2682 <__mulsf3_pse+0x64>
    2698:	9e 3f       	cpi	r25, 0xFE	; 254
    269a:	51 05       	cpc	r21, r1
    269c:	80 f0       	brcs	.+32     	; 0x26be <__mulsf3_pse+0xa0>
    269e:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__fp_inf>
    26a2:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__fp_szero>
    26a6:	5f 3f       	cpi	r21, 0xFF	; 255
    26a8:	e4 f3       	brlt	.-8      	; 0x26a2 <__mulsf3_pse+0x84>
    26aa:	98 3e       	cpi	r25, 0xE8	; 232
    26ac:	d4 f3       	brlt	.-12     	; 0x26a2 <__mulsf3_pse+0x84>
    26ae:	86 95       	lsr	r24
    26b0:	77 95       	ror	r23
    26b2:	67 95       	ror	r22
    26b4:	b7 95       	ror	r27
    26b6:	f7 95       	ror	r31
    26b8:	e7 95       	ror	r30
    26ba:	9f 5f       	subi	r25, 0xFF	; 255
    26bc:	c1 f7       	brne	.-16     	; 0x26ae <__mulsf3_pse+0x90>
    26be:	fe 2b       	or	r31, r30
    26c0:	88 0f       	add	r24, r24
    26c2:	91 1d       	adc	r25, r1
    26c4:	96 95       	lsr	r25
    26c6:	87 95       	ror	r24
    26c8:	97 f9       	bld	r25, 7
    26ca:	08 95       	ret
    26cc:	19 f4       	brne	.+6      	; 0x26d4 <__mulsf3_pse+0xb6>
    26ce:	16 f4       	brtc	.+4      	; 0x26d4 <__mulsf3_pse+0xb6>
    26d0:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__fp_nan>
    26d4:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__fp_mpack>

000026d8 <sqrt>:
    26d8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fp_splitA>
    26dc:	b8 f3       	brcs	.-18     	; 0x26cc <__mulsf3_pse+0xae>
    26de:	99 23       	and	r25, r25
    26e0:	c9 f3       	breq	.-14     	; 0x26d4 <__mulsf3_pse+0xb6>
    26e2:	b6 f3       	brts	.-20     	; 0x26d0 <__mulsf3_pse+0xb2>
    26e4:	9f 57       	subi	r25, 0x7F	; 127
    26e6:	55 0b       	sbc	r21, r21
    26e8:	87 ff       	sbrs	r24, 7
    26ea:	0e 94 be 13 	call	0x277c	; 0x277c <__fp_norm2>
    26ee:	00 24       	eor	r0, r0
    26f0:	a0 e6       	ldi	r26, 0x60	; 96
    26f2:	40 ea       	ldi	r20, 0xA0	; 160
    26f4:	90 01       	movw	r18, r0
    26f6:	80 58       	subi	r24, 0x80	; 128
    26f8:	56 95       	lsr	r21
    26fa:	97 95       	ror	r25
    26fc:	28 f4       	brcc	.+10     	; 0x2708 <sqrt+0x30>
    26fe:	80 5c       	subi	r24, 0xC0	; 192
    2700:	66 0f       	add	r22, r22
    2702:	77 1f       	adc	r23, r23
    2704:	88 1f       	adc	r24, r24
    2706:	20 f0       	brcs	.+8      	; 0x2710 <sqrt+0x38>
    2708:	26 17       	cp	r18, r22
    270a:	37 07       	cpc	r19, r23
    270c:	48 07       	cpc	r20, r24
    270e:	30 f4       	brcc	.+12     	; 0x271c <sqrt+0x44>
    2710:	62 1b       	sub	r22, r18
    2712:	73 0b       	sbc	r23, r19
    2714:	84 0b       	sbc	r24, r20
    2716:	20 29       	or	r18, r0
    2718:	31 29       	or	r19, r1
    271a:	4a 2b       	or	r20, r26
    271c:	a6 95       	lsr	r26
    271e:	17 94       	ror	r1
    2720:	07 94       	ror	r0
    2722:	20 25       	eor	r18, r0
    2724:	31 25       	eor	r19, r1
    2726:	4a 27       	eor	r20, r26
    2728:	58 f7       	brcc	.-42     	; 0x2700 <sqrt+0x28>
    272a:	66 0f       	add	r22, r22
    272c:	77 1f       	adc	r23, r23
    272e:	88 1f       	adc	r24, r24
    2730:	20 f0       	brcs	.+8      	; 0x273a <sqrt+0x62>
    2732:	26 17       	cp	r18, r22
    2734:	37 07       	cpc	r19, r23
    2736:	48 07       	cpc	r20, r24
    2738:	30 f4       	brcc	.+12     	; 0x2746 <sqrt+0x6e>
    273a:	62 0b       	sbc	r22, r18
    273c:	73 0b       	sbc	r23, r19
    273e:	84 0b       	sbc	r24, r20
    2740:	20 0d       	add	r18, r0
    2742:	31 1d       	adc	r19, r1
    2744:	41 1d       	adc	r20, r1
    2746:	a0 95       	com	r26
    2748:	81 f7       	brne	.-32     	; 0x272a <sqrt+0x52>
    274a:	b9 01       	movw	r22, r18
    274c:	84 2f       	mov	r24, r20
    274e:	91 58       	subi	r25, 0x81	; 129
    2750:	88 0f       	add	r24, r24
    2752:	96 95       	lsr	r25
    2754:	87 95       	ror	r24
    2756:	08 95       	ret

00002758 <square>:
    2758:	9b 01       	movw	r18, r22
    275a:	ac 01       	movw	r20, r24
    275c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__mulsf3>

00002760 <__fp_mpack>:
    2760:	9f 3f       	cpi	r25, 0xFF	; 255
    2762:	31 f0       	breq	.+12     	; 0x2770 <__fp_mpack_finite+0xc>

00002764 <__fp_mpack_finite>:
    2764:	91 50       	subi	r25, 0x01	; 1
    2766:	20 f4       	brcc	.+8      	; 0x2770 <__fp_mpack_finite+0xc>
    2768:	87 95       	ror	r24
    276a:	77 95       	ror	r23
    276c:	67 95       	ror	r22
    276e:	b7 95       	ror	r27
    2770:	88 0f       	add	r24, r24
    2772:	91 1d       	adc	r25, r1
    2774:	96 95       	lsr	r25
    2776:	87 95       	ror	r24
    2778:	97 f9       	bld	r25, 7
    277a:	08 95       	ret

0000277c <__fp_norm2>:
    277c:	91 50       	subi	r25, 0x01	; 1
    277e:	50 40       	sbci	r21, 0x00	; 0
    2780:	66 0f       	add	r22, r22
    2782:	77 1f       	adc	r23, r23
    2784:	88 1f       	adc	r24, r24
    2786:	d2 f7       	brpl	.-12     	; 0x277c <__fp_norm2>
    2788:	08 95       	ret

0000278a <__divmodhi4>:
    278a:	97 fb       	bst	r25, 7
    278c:	07 2e       	mov	r0, r23
    278e:	16 f4       	brtc	.+4      	; 0x2794 <__divmodhi4+0xa>
    2790:	00 94       	com	r0
    2792:	07 d0       	rcall	.+14     	; 0x27a2 <__divmodhi4_neg1>
    2794:	77 fd       	sbrc	r23, 7
    2796:	09 d0       	rcall	.+18     	; 0x27aa <__divmodhi4_neg2>
    2798:	0e 94 0a 14 	call	0x2814	; 0x2814 <__udivmodhi4>
    279c:	07 fc       	sbrc	r0, 7
    279e:	05 d0       	rcall	.+10     	; 0x27aa <__divmodhi4_neg2>
    27a0:	3e f4       	brtc	.+14     	; 0x27b0 <__divmodhi4_exit>

000027a2 <__divmodhi4_neg1>:
    27a2:	90 95       	com	r25
    27a4:	81 95       	neg	r24
    27a6:	9f 4f       	sbci	r25, 0xFF	; 255
    27a8:	08 95       	ret

000027aa <__divmodhi4_neg2>:
    27aa:	70 95       	com	r23
    27ac:	61 95       	neg	r22
    27ae:	7f 4f       	sbci	r23, 0xFF	; 255

000027b0 <__divmodhi4_exit>:
    27b0:	08 95       	ret

000027b2 <__udivmodsi4>:
    27b2:	a1 e2       	ldi	r26, 0x21	; 33
    27b4:	1a 2e       	mov	r1, r26
    27b6:	aa 1b       	sub	r26, r26
    27b8:	bb 1b       	sub	r27, r27
    27ba:	fd 01       	movw	r30, r26
    27bc:	0d c0       	rjmp	.+26     	; 0x27d8 <__udivmodsi4_ep>

000027be <__udivmodsi4_loop>:
    27be:	aa 1f       	adc	r26, r26
    27c0:	bb 1f       	adc	r27, r27
    27c2:	ee 1f       	adc	r30, r30
    27c4:	ff 1f       	adc	r31, r31
    27c6:	a2 17       	cp	r26, r18
    27c8:	b3 07       	cpc	r27, r19
    27ca:	e4 07       	cpc	r30, r20
    27cc:	f5 07       	cpc	r31, r21
    27ce:	20 f0       	brcs	.+8      	; 0x27d8 <__udivmodsi4_ep>
    27d0:	a2 1b       	sub	r26, r18
    27d2:	b3 0b       	sbc	r27, r19
    27d4:	e4 0b       	sbc	r30, r20
    27d6:	f5 0b       	sbc	r31, r21

000027d8 <__udivmodsi4_ep>:
    27d8:	66 1f       	adc	r22, r22
    27da:	77 1f       	adc	r23, r23
    27dc:	88 1f       	adc	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	1a 94       	dec	r1
    27e2:	69 f7       	brne	.-38     	; 0x27be <__udivmodsi4_loop>
    27e4:	60 95       	com	r22
    27e6:	70 95       	com	r23
    27e8:	80 95       	com	r24
    27ea:	90 95       	com	r25
    27ec:	9b 01       	movw	r18, r22
    27ee:	ac 01       	movw	r20, r24
    27f0:	bd 01       	movw	r22, r26
    27f2:	cf 01       	movw	r24, r30
    27f4:	08 95       	ret

000027f6 <__umulhisi3>:
    27f6:	a2 9f       	mul	r26, r18
    27f8:	b0 01       	movw	r22, r0
    27fa:	b3 9f       	mul	r27, r19
    27fc:	c0 01       	movw	r24, r0
    27fe:	a3 9f       	mul	r26, r19
    2800:	70 0d       	add	r23, r0
    2802:	81 1d       	adc	r24, r1
    2804:	11 24       	eor	r1, r1
    2806:	91 1d       	adc	r25, r1
    2808:	b2 9f       	mul	r27, r18
    280a:	70 0d       	add	r23, r0
    280c:	81 1d       	adc	r24, r1
    280e:	11 24       	eor	r1, r1
    2810:	91 1d       	adc	r25, r1
    2812:	08 95       	ret

00002814 <__udivmodhi4>:
    2814:	aa 1b       	sub	r26, r26
    2816:	bb 1b       	sub	r27, r27
    2818:	51 e1       	ldi	r21, 0x11	; 17
    281a:	07 c0       	rjmp	.+14     	; 0x282a <__udivmodhi4_ep>

0000281c <__udivmodhi4_loop>:
    281c:	aa 1f       	adc	r26, r26
    281e:	bb 1f       	adc	r27, r27
    2820:	a6 17       	cp	r26, r22
    2822:	b7 07       	cpc	r27, r23
    2824:	10 f0       	brcs	.+4      	; 0x282a <__udivmodhi4_ep>
    2826:	a6 1b       	sub	r26, r22
    2828:	b7 0b       	sbc	r27, r23

0000282a <__udivmodhi4_ep>:
    282a:	88 1f       	adc	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	5a 95       	dec	r21
    2830:	a9 f7       	brne	.-22     	; 0x281c <__udivmodhi4_loop>
    2832:	80 95       	com	r24
    2834:	90 95       	com	r25
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	08 95       	ret

0000283c <_exit>:
    283c:	f8 94       	cli

0000283e <__stop_program>:
    283e:	ff cf       	rjmp	.-2      	; 0x283e <__stop_program>
